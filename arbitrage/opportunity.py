# arbitrage/opportunity.py
from dataclasses import dataclass
from datetime import datetime
from typing import Dict, Optional, List

@dataclass
class ArbitrageOpportunity:
    """
    –ö–ª–∞—Å –¥–ª—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—è –∞—Ä–±—ñ—Ç—Ä–∞–∂–Ω–æ—ó –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ
    """
    symbol: str  # –í–∞–ª—é—Ç–Ω–∞ –ø–∞—Ä–∞ –∞–±–æ —à–ª—è—Ö
    buy_exchange: str  # –ë—ñ—Ä–∂–∞ –¥–ª—è –∫—É–ø—ñ–≤–ª—ñ
    sell_exchange: str  # –ë—ñ—Ä–∂–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∂—É
    buy_price: float  # –¶—ñ–Ω–∞ –∫—É–ø—ñ–≤–ª—ñ
    sell_price: float  # –¶—ñ–Ω–∞ –ø—Ä–æ–¥–∞–∂—É
    profit_percent: float  # –í—ñ–¥—Å–æ—Ç–æ–∫ –ø—Ä–∏–±—É—Ç–∫—É (–±–µ–∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –∫–æ–º—ñ—Å—ñ–π)
    buy_fee: float = 0.0  # –ö–æ–º—ñ—Å—ñ—è –±—ñ—Ä–∂—ñ –¥–ª—è –∫—É–ø—ñ–≤–ª—ñ (%)
    sell_fee: float = 0.0  # –ö–æ–º—ñ—Å—ñ—è –±—ñ—Ä–∂—ñ –¥–ª—è –ø—Ä–æ–¥–∞–∂—É (%)
    net_profit_percent: Optional[float] = None  # –ß–∏—Å—Ç–∏–π –ø—Ä–∏–±—É—Ç–æ–∫ –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º –∫–æ–º—ñ—Å—ñ–π (%)
    timestamp: datetime = datetime.now()  # –ß–∞—Å –≤–∏—è–≤–ª–µ–Ω–Ω—è
    buy_fee_type: str = ""  # –¢–∏–ø –∫–æ–º—ñ—Å—ñ—ó –¥–ª—è –∫—É–ø—ñ–≤–ª—ñ (maker/taker)
    sell_fee_type: str = ""  # –¢–∏–ø –∫–æ–º—ñ—Å—ñ—ó –¥–ª—è –ø—Ä–æ–¥–∞–∂—É (maker/taker)
    opportunity_type: str = "cross"  # –¢–∏–ø –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ: "cross" (–∫—Ä–æ—Å-–±—ñ—Ä–∂–æ–≤–∏–π) –∞–±–æ "triangular" (—Ç—Ä–∏–∫—É—Ç–Ω–∏–π)
    path: Optional[List[str]] = None  # –®–ª—è—Ö –¥–ª—è —Ç—Ä–∏–∫—É—Ç–Ω–æ–≥–æ –∞—Ä–±—ñ—Ç—Ä–∞–∂—É
    estimated_fees: float = 0.0  # –û—Ü—ñ–Ω–∫–∞ –∑–∞–≥–∞–ª—å–Ω–∏—Ö –∫–æ–º—ñ—Å—ñ–π
    
    def __post_init__(self):
        """
        –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —Ä–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ —á–∏—Å—Ç–∏–π –ø—Ä–∏–±—É—Ç–æ–∫, —è–∫—â–æ –≤—ñ–Ω –Ω–µ –≤–∫–∞–∑–∞–Ω–∏–π
        """
        if self.net_profit_percent is None and (self.buy_fee > 0 or self.sell_fee > 0):
            # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —á–∏—Å—Ç–æ–≥–æ –ø—Ä–∏–±—É—Ç–∫—É –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º –∫–æ–º—ñ—Å—ñ–π
            # –ö—É–ø—É—î–º–æ –∑–∞ buy_price, –ø–ª–∞—Ç–∏–º–æ –∫–æ–º—ñ—Å—ñ—é buy_fee
            # –ü—Ä–æ–¥–∞—î–º–æ –∑–∞ sell_price, –ø–ª–∞—Ç–∏–º–æ –∫–æ–º—ñ—Å—ñ—é sell_fee
            buy_with_fee = self.buy_price * (1 + self.buy_fee / 100)
            sell_with_fee = self.sell_price * (1 - self.sell_fee / 100)
            self.net_profit_percent = (sell_with_fee - buy_with_fee) / buy_with_fee * 100
    
    def to_dict(self) -> Dict:
        """
        –ü–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–±'—î–∫—Ç–∞ –≤ —Å–ª–æ–≤–Ω–∏–∫
        """
        result = {
            'symbol': self.symbol,
            'buy_exchange': self.buy_exchange,
            'sell_exchange': self.sell_exchange,
            'buy_price': self.buy_price,
            'sell_price': self.sell_price,
            'profit_percent': self.profit_percent,
            'timestamp': self.timestamp.isoformat(),
            'opportunity_type': self.opportunity_type
        }
        
        if self.path:
            result['path'] = self.path
            
        if self.buy_fee > 0 or self.sell_fee > 0:
            result.update({
                'buy_fee': self.buy_fee,
                'buy_fee_type': self.buy_fee_type,
                'sell_fee': self.sell_fee,
                'sell_fee_type': self.sell_fee_type,
                'net_profit_percent': self.net_profit_percent
            })
            
        return result
    
    def to_message(self) -> str:
        """
        –§–æ—Ä–º–∞—Ç—É—î –∞—Ä–±—ñ—Ç—Ä–∞–∂–Ω—É –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –≤ Telegram
        """
        # –î–æ–¥–∞—î–º–æ –µ–º–æ–¥–∑—ñ –≤ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—ñ–¥ —Ä–æ–∑–º—ñ—Ä—É –ø—Ä–∏–±—É—Ç–∫—É
        if self.net_profit_percent is not None:
            profit_value = self.net_profit_percent
        else:
            profit_value = self.profit_percent
            
        if profit_value >= 5.0:
            emoji = "üî•"  # –î—É–∂–µ –≤–∏—Å–æ–∫–∏–π –ø—Ä–∏–±—É—Ç–æ–∫
        elif profit_value >= 2.0:
            emoji = "üí∞"  # –í–∏—Å–æ–∫–∏–π –ø—Ä–∏–±—É—Ç–æ–∫
        elif profit_value >= 1.0:
            emoji = "üìà"  # –°–µ—Ä–µ–¥–Ω—ñ–π –ø—Ä–∏–±—É—Ç–æ–∫
        else:
            emoji = "üîç"  # –ù–∏–∑—å–∫–∏–π –ø—Ä–∏–±—É—Ç–æ–∫
            
        # –î–æ–¥–∞—î–º–æ –µ–º–æ–¥–∑—ñ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∏, —è–∫—â–æ –≤–æ–Ω–∏ –¥–æ—Å—Ç—É–ø–Ω—ñ
        if self.opportunity_type == "cross":
            coin_symbol = self.symbol.split('/')[0]
            coin_emoji = self._get_coin_emoji(coin_symbol)
            
            message = (
                f"<b>{emoji} {coin_emoji} –ö—Ä–æ—Å-–±—ñ—Ä–∂–æ–≤–∞ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å ({self.profit_percent:.2f}%)</b>\n\n"
                f"<b>–ü–∞—Ä–∞:</b> {self.symbol}\n"
                f"<b>–ö—É–ø–∏—Ç–∏ –Ω–∞:</b> {self.buy_exchange} –∑–∞ {self.buy_price:.8f}\n"
                f"<b>–ü—Ä–æ–¥–∞—Ç–∏ –Ω–∞:</b> {self.sell_exchange} –∑–∞ {self.sell_price:.8f}\n"
            )
        else:  # triangular
            # –î–ª—è —Ç—Ä–∏–∫—É—Ç–Ω–æ–≥–æ –∞—Ä–±—ñ—Ç—Ä–∞–∂—É –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –µ–º–æ–¥–∑—ñ –ø–µ—Ä—à–æ—ó –≤–∞–ª—é—Ç–∏ –≤ —à–ª—è—Ö—É
            if self.path and len(self.path) > 0:
                coin_symbol = self.path[0]
                coin_emoji = self._get_coin_emoji(coin_symbol)
                path_str = " ‚Üí ".join(self.path)
                
                message = (
                    f"<b>{emoji} {coin_emoji} –¢—Ä–∏–∫—É—Ç–Ω–∞ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å ({self.profit_percent:.2f}%)</b>\n\n"
                    f"<b>–ë—ñ—Ä–∂–∞:</b> {self.buy_exchange}\n"
                    f"<b>–®–ª—è—Ö:</b> {path_str}\n"
                    f"<b>–ü–æ—á–∞—Ç–∫–æ–≤–∞ —Ü—ñ–Ω–∞:</b> {self.buy_price:.8f}\n"
                    f"<b>–ö—ñ–Ω—Ü–µ–≤–∞ —Ü—ñ–Ω–∞:</b> {self.sell_price:.8f}\n"
                )
            else:
                coin_emoji = "ü™ô"
                message = (
                    f"<b>{emoji} {coin_emoji} –¢—Ä–∏–∫—É—Ç–Ω–∞ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å ({self.profit_percent:.2f}%)</b>\n\n"
                    f"<b>–ë—ñ—Ä–∂–∞:</b> {self.buy_exchange}\n"
                    f"<b>–ü–æ—á–∞—Ç–∫–æ–≤–∞ —Ü—ñ–Ω–∞:</b> {self.buy_price:.8f}\n"
                    f"<b>–ö—ñ–Ω—Ü–µ–≤–∞ —Ü—ñ–Ω–∞:</b> {self.sell_price:.8f}\n"
                )
        
        # –î–æ–¥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ–º—ñ—Å—ñ—ó —Ç–∞ —á–∏—Å—Ç–∏–π –ø—Ä–∏–±—É—Ç–æ–∫, —è–∫—â–æ –≤–æ–Ω–∏ –¥–æ—Å—Ç—É–ø–Ω—ñ
        if self.buy_fee > 0 or self.sell_fee > 0:
            message += (
                f"<b>–ö–æ–º—ñ—Å—ñ—è –∫—É–ø—ñ–≤–ª—ñ ({self.buy_fee_type}):</b> {self.buy_fee:.2f}%\n"
                f"<b>–ö–æ–º—ñ—Å—ñ—è –ø—Ä–æ–¥–∞–∂—É ({self.sell_fee_type}):</b> {self.sell_fee:.2f}%\n"
                f"<b>–ü—Ä–∏–±—É—Ç–æ–∫ (–±—Ä—É—Ç—Ç–æ):</b> {self.profit_percent:.2f}%\n"
                f"<b>–ü—Ä–∏–±—É—Ç–æ–∫ (–Ω–µ—Ç—Ç–æ):</b> {self.net_profit_percent:.2f}%\n"
            )
        else:
            message += f"<b>–ü—Ä–∏–±—É—Ç–æ–∫:</b> {self.profit_percent:.2f}%\n"
            
        message += f"<b>–ß–∞—Å:</b> {self.timestamp.strftime('%Y-%m-%d %H:%M:%S')}"
        
        return message
        
    def _get_coin_emoji(self, coin_symbol: str) -> str:
        """
        –ü–æ–≤–µ—Ä—Ç–∞—î –µ–º–æ–¥–∑—ñ –¥–ª—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∏
        """
        coin_emojis = {
            "BTC": "‚Çø",
            "ETH": "Œû",
            "XRP": "‚úñ",
            "BNB": "üî∂",
            "SOL": "‚òÄÔ∏è",
            "TRX": "‚ô¶Ô∏è",
            "HBAR": "‚ôì",
            "NEAR": "üî∫",
            "ATOM": "‚öõÔ∏è",
            "ADA": "üî∑",
            "AVAX": "üî∫",
            "USDT": "üíµ",
            "USDC": "üí≤"
        }
        
        return coin_emojis.get(coin_symbol, "ü™ô")  # –Ø–∫—â–æ –µ–º–æ–¥–∑—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –∑–∞–≥–∞–ª—å–Ω–∏–π –µ–º–æ–¥–∑—ñ –º–æ–Ω–µ—Ç–∏
