# arbitrage/opportunity.py
from dataclasses import dataclass
from datetime import datetime
from typing import Dict, List, Optional

@dataclass
class ArbitrageOpportunity:
    """
    –ö–ª–∞—Å –¥–ª—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—è –∞—Ä–±—ñ—Ç—Ä–∞–∂–Ω–æ—ó –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ
    """
    symbol: str  # –í–∞–ª—é—Ç–Ω–∞ –ø–∞—Ä–∞
    buy_exchange: str  # –ë—ñ—Ä–∂–∞ –¥–ª—è –∫—É–ø—ñ–≤–ª—ñ
    sell_exchange: str  # –ë—ñ—Ä–∂–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∂—É
    buy_price: float  # –¶—ñ–Ω–∞ –∫—É–ø—ñ–≤–ª—ñ
    sell_price: float  # –¶—ñ–Ω–∞ –ø—Ä–æ–¥–∞–∂—É
    profit_percent: float  # –í—ñ–¥—Å–æ—Ç–æ–∫ –ø—Ä–∏–±—É—Ç–∫—É (–±–µ–∑ –≤—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –∫–æ–º—ñ—Å—ñ–π)
    timestamp: datetime = datetime.now()  # –ß–∞—Å –≤–∏—è–≤–ª–µ–Ω–Ω—è
    
    # –ù–æ–≤—ñ –ø–æ–ª—è
    opportunity_type: str = "cross"  # –¢–∏–ø –∞—Ä–±—ñ—Ç—Ä–∞–∂—É: "cross" –∞–±–æ "triangular"
    estimated_fees: float = 0.0  # –û—Ü—ñ–Ω–∫–∞ –∫–æ–º—ñ—Å—ñ–π —É –≤—ñ–¥—Å–æ—Ç–∫–∞—Ö
    net_profit_percent: float = 0.0  # –ß–∏—Å—Ç–∏–π –ø—Ä–∏–±—É—Ç–æ–∫ –ø—ñ—Å–ª—è –∫–æ–º—ñ—Å—ñ–π
    estimated_execution_time: int = 0  # –û—Ü—ñ–Ω–∫–∞ —á–∞—Å—É –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    path: Optional[List[str]] = None  # –®–ª—è—Ö –¥–ª—è —Ç—Ä–∏–∫—É—Ç–Ω–æ–≥–æ –∞—Ä–±—ñ—Ç—Ä–∞–∂—É
    volume_limitation: Optional[float] = None  # –û–±–º–µ–∂–µ–Ω–Ω—è –æ–±—Å—è–≥—É –¥–ª—è –∞—Ä–±—ñ—Ç—Ä–∞–∂—É
    
    def __post_init__(self):
        """
        –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —Ä–æ–∑—Ä–∞—Ö–æ–≤—É—î —á–∏—Å—Ç–∏–π –ø—Ä–∏–±—É—Ç–æ–∫ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –æ–±'—î–∫—Ç–∞
        """
        self.calculate_net_profit()
    
    def calculate_net_profit(self):
        """
        –†–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏ —á–∏—Å—Ç–∏–π –ø—Ä–∏–±—É—Ç–æ–∫ –ø—ñ—Å–ª—è –≤—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –∫–æ–º—ñ—Å—ñ–π
        """
        self.net_profit_percent = self.profit_percent - self.estimated_fees
        return self.net_profit_percent
    
    def to_dict(self) -> Dict:
        """
        –ü–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–±'—î–∫—Ç–∞ –≤ —Å–ª–æ–≤–Ω–∏–∫
        """
        result = {
            'symbol': self.symbol,
            'buy_exchange': self.buy_exchange,
            'sell_exchange': self.sell_exchange,
            'buy_price': self.buy_price,
            'sell_price': self.sell_price,
            'profit_percent': self.profit_percent,
            'estimated_fees': self.estimated_fees,
            'net_profit_percent': self.net_profit_percent,
            'timestamp': self.timestamp.isoformat(),
            'opportunity_type': self.opportunity_type
        }
        
        if self.path:
            result['path'] = self.path
            
        if self.volume_limitation:
            result['volume_limitation'] = self.volume_limitation
            
        return result
    
    def to_message(self) -> str:
        """
        –§–æ—Ä–º–∞—Ç—É—î –∞—Ä–±—ñ—Ç—Ä–∞–∂–Ω—É –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –≤ Telegram
        """
        # –í–∏–∑–Ω–∞—á–∞—î–º–æ –µ–º–æ–¥–∑—ñ –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –ø—Ä–∏–±—É—Ç–∫—É
        profit_emoji = "üî•" if self.net_profit_percent > 1.5 else "üí∞" if self.net_profit_percent > 0.8 else "üí∏"
        
        if self.opportunity_type == "cross":
            return (
                f"<b>{profit_emoji} –ö—Ä–æ—Å-–±—ñ—Ä–∂–æ–≤–∞ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å ({self.net_profit_percent:.2f}% –ø—ñ—Å–ª—è –∫–æ–º—ñ—Å—ñ–π)</b>\n\n"
                f"<b>–ü–∞—Ä–∞:</b> {self.symbol}\n"
                f"<b>–ö—É–ø–∏—Ç–∏ –Ω–∞:</b> {self.buy_exchange} –∑–∞ {self.buy_price:.8f}\n"
                f"<b>–ü—Ä–æ–¥–∞—Ç–∏ –Ω–∞:</b> {self.sell_exchange} –∑–∞ {self.sell_price:.8f}\n"
                f"<b>–ü—Ä–∏–±—É—Ç–æ–∫:</b> {self.profit_percent:.2f}% (–∫–æ–º—ñ—Å—ñ—ó: {self.estimated_fees:.2f}%)\n"
                f"<b>–ß–∞—Å:</b> {self.timestamp.strftime('%Y-%m-%d %H:%M:%S')}"
            )
        elif self.opportunity_type == "triangular":
            # –§–æ—Ä–º–∞—Ç—É—î–º–æ —à–ª—è—Ö –¥–ª—è —Ç—Ä–∏–∫—É—Ç–Ω–æ–≥–æ –∞—Ä–±—ñ—Ç—Ä–∞–∂—É
            path_str = " ‚Üí ".join(self.path) if self.path else "–ù–µ–≤—ñ–¥–æ–º–∏–π —à–ª—è—Ö"
            
            return (
                f"<b>{profit_emoji} –¢—Ä–∏–∫—É—Ç–Ω–∞ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å ({self.net_profit_percent:.2f}% –ø—ñ—Å–ª—è –∫–æ–º—ñ—Å—ñ–π)</b>\n\n"
                f"<b>–ë—ñ—Ä–∂–∞:</b> {self.buy_exchange}\n"
                f"<b>–®–ª—è—Ö:</b> {path_str}\n"
                f"<b>–ü—Ä–∏–±—É—Ç–æ–∫:</b> {self.profit_percent:.2f}% (–∫–æ–º—ñ—Å—ñ—ó: {self.estimated_fees:.2f}%)\n"
                f"<b>–ß–∞—Å:</b> {self.timestamp.strftime('%Y-%m-%d %H:%M:%S')}"
            )
        else:
            return (
                f"<b>{profit_emoji} –ê—Ä–±—ñ—Ç—Ä–∞–∂–Ω–∞ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å ({self.net_profit_percent:.2f}% –ø—ñ—Å–ª—è –∫–æ–º—ñ—Å—ñ–π)</b>\n\n"
                f"<b>–ü–∞—Ä–∞:</b> {self.symbol}\n"
                f"<b>–ö—É–ø–∏—Ç–∏ –Ω–∞:</b> {self.buy_exchange} –∑–∞ {self.buy_price:.8f}\n"
                f"<b>–ü—Ä–æ–¥–∞—Ç–∏ –Ω–∞:</b> {self.sell_exchange} –∑–∞ {self.sell_price:.8f}\n"
                f"<b>–ü—Ä–∏–±—É—Ç–æ–∫:</b> {self.profit_percent:.2f}% (–∫–æ–º—ñ—Å—ñ—ó: {self.estimated_fees:.2f}%)\n"
                f"<b>–ß–∞—Å:</b> {self.timestamp.strftime('%Y-%m-%d %H:%M:%S')}"
            )
