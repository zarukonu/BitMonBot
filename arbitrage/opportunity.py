# arbitrage/opportunity.py
from dataclasses import dataclass
from datetime import datetime
from typing import Dict

@dataclass
class ArbitrageOpportunity:
    """
    –ö–ª–∞—Å –¥–ª—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—è –∞—Ä–±—ñ—Ç—Ä–∞–∂–Ω–æ—ó –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ
    """
    symbol: str  # –í–∞–ª—é—Ç–Ω–∞ –ø–∞—Ä–∞
    buy_exchange: str  # –ë—ñ—Ä–∂–∞ –¥–ª—è –∫—É–ø—ñ–≤–ª—ñ
    sell_exchange: str  # –ë—ñ—Ä–∂–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∂—É
    buy_price: float  # –¶—ñ–Ω–∞ –∫—É–ø—ñ–≤–ª—ñ
    sell_price: float  # –¶—ñ–Ω–∞ –ø—Ä–æ–¥–∞–∂—É
    profit_percent: float  # –í—ñ–¥—Å–æ—Ç–æ–∫ –ø—Ä–∏–±—É—Ç–∫—É
    timestamp: datetime = datetime.now()  # –ß–∞—Å –≤–∏—è–≤–ª–µ–Ω–Ω—è
    
    def to_dict(self) -> Dict:
        """
        –ü–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–±'—î–∫—Ç–∞ –≤ —Å–ª–æ–≤–Ω–∏–∫
        """
        return {
            'symbol': self.symbol,
            'buy_exchange': self.buy_exchange,
            'sell_exchange': self.sell_exchange,
            'buy_price': self.buy_price,
            'sell_price': self.sell_price,
            'profit_percent': self.profit_percent,
            'timestamp': self.timestamp.isoformat()
        }
    
    def to_message(self) -> str:
        """
        –§–æ—Ä–º–∞—Ç—É—î –∞—Ä–±—ñ—Ç—Ä–∞–∂–Ω—É –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –≤ Telegram
        """
        return (
            f"<b>üîç –ê—Ä–±—ñ—Ç—Ä–∞–∂–Ω–∞ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å ({self.profit_percent:.2f}%)</b>\n\n"
            f"<b>–ü–∞—Ä–∞:</b> {self.symbol}\n"
            f"<b>–ö—É–ø–∏—Ç–∏ –Ω–∞:</b> {self.buy_exchange} –∑–∞ {self.buy_price:.8f}\n"
            f"<b>–ü—Ä–æ–¥–∞—Ç–∏ –Ω–∞:</b> {self.sell_exchange} –∑–∞ {self.sell_price:.8f}\n"
            f"<b>–ü—Ä–∏–±—É—Ç–æ–∫:</b> {self.profit_percent:.2f}%\n"
            f"<b>–ß–∞—Å:</b> {self.timestamp.strftime('%Y-%m-%d %H:%M:%S')}"
        )
