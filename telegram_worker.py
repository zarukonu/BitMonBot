# telegram_worker.py
import asyncio
import logging
from typing import Dict, List, Optional, Any
import json
import traceback

import config
from notifier.telegram_notifier import TelegramNotifier

logger = logging.getLogger('telegram')

class TelegramWorker:
    """
    –í–æ—Ä–∫–µ—Ä –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—ó –æ–±—Ä–æ–±–∫–∏ —á–µ—Ä–≥–∏ Telegram-–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
    """
    def __init__(self, bot_token: str, chat_id: str):
        self.bot_token = bot_token
        self.chat_id = chat_id
        self.queue: Optional[asyncio.Queue] = None
        self.notifier: Optional[TelegramNotifier] = None
        self.worker_task: Optional[asyncio.Task] = None
        self.command_handlers: Dict[str, Any] = {}
        self.last_update_id: int = 0
        self.command_task: Optional[asyncio.Task] = None
        
    async def start(self):
        """
        –ó–∞–ø—É—Å–∫–∞—î –≤–æ—Ä–∫–µ—Ä
        """
        # –°—Ç–≤–æ—Ä—é—î–º–æ —á–µ—Ä–≥—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
        self.queue = asyncio.Queue()
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä
        self.notifier = TelegramNotifier(self.bot_token, self.chat_id, self.queue)
        await self.notifier.initialize()
        
        # –ó–∞–ø—É—Å–∫–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ —á–µ—Ä–≥–∏
        self.worker_task = asyncio.create_task(self.notifier.process_queue())
        
        # –ó–∞–ø—É—Å–∫–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥
        self.command_task = asyncio.create_task(self.process_commands())
        
        # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –∫–æ–º–∞–Ω–¥–∏ –±–æ—Ç–∞
        await self.setup_commands()
        
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —Å—Ç–∞—Ä—Ç –±–æ—Ç–∞
        await self.notifier.send_formatted_message(config.START_MESSAGE)
        
        logger.info("Telegram Worker —É—Å–ø—ñ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–æ")
        
    async def stop(self):
        """
        –ó—É–ø–∏–Ω—è—î –≤–æ—Ä–∫–µ—Ä
        """
        logger.info("–ó—É–ø–∏–Ω–∫–∞ Telegram Worker...")
        
        if self.command_task:
            self.command_task.cancel()
            try:
                await self.command_task
            except asyncio.CancelledError:
                pass
            self.command_task = None
        
        if self.worker_task:
            self.worker_task.cancel()
            try:
                await self.worker_task
            except asyncio.CancelledError:
                pass
            self.worker_task = None
            
        if self.notifier:
            await self.notifier.close()
            self.notifier = None
            
        logger.info("Telegram Worker —É—Å–ø—ñ—à–Ω–æ –∑—É–ø–∏–Ω–µ–Ω–æ")
        
    async def send_message(self, message: str, parse_mode: Optional[str] = None):
        """
        –î–æ–¥–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–æ —á–µ—Ä–≥–∏ –Ω–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫—É
        """
        if not self.notifier:
            logger.error("–°–ø—Ä–æ–±–∞ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –∞–ª–µ Telegram Worker –Ω–µ –∑–∞–ø—É—â–µ–Ω–æ")
            return False
            
        if parse_mode:
            return await self.notifier.send_formatted_message(message, parse_mode)
        else:
            return await self.notifier.send_message(message)
    
    async def setup_commands(self):
        """
        –ù–∞–ª–∞—à—Ç–æ–≤—É—î –∫–æ–º–∞–Ω–¥–∏ Telegram-–±–æ—Ç–∞
        """
        commands = [
            {"command": "start", "description": "–ó–∞–ø—É—Å—Ç–∏—Ç–∏ –±–æ—Ç–∞"},
            {"command": "stop", "description": "–ó—É–ø–∏–Ω–∏—Ç–∏ –±–æ—Ç–∞"},
            {"command": "status", "description": "–û—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞"},
            {"command": "stats", "description": "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞—Ä–±—ñ—Ç—Ä–∞–∂—É"},
            {"command": "top", "description": "–ù–∞–π–∫—Ä–∞—â—ñ –∞—Ä–±—ñ—Ç—Ä–∞–∂–Ω—ñ –ø–∞—Ä–∏"}
        ]
        
        # –†–µ—î—Å—Ç—Ä—É—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        self.command_handlers = {
            "start": self.handle_start_command,
            "stop": self.handle_stop_command,
            "status": self.handle_status_command,
            "stats": self.handle_stats_command,
            "top": self.handle_top_command
        }
        
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∫–æ–º–∞–Ω–¥–∏ –≤ Telegram API
        if self.notifier and self.notifier.session:
            try:
                url = f"https://api.telegram.org/bot{self.bot_token}/setMyCommands"
                async with self.notifier.session.post(url, json={"commands": commands}) as response:
                    if response.status == 200:
                        logger.info("–ö–æ–º–∞–Ω–¥–∏ –±–æ—Ç–∞ —É—Å–ø—ñ—à–Ω–æ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
                    else:
                        response_text = await response.text()
                        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ñ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞: {response.status} - {response_text}")
            except Exception as e:
                logger.error(f"–í–∏–Ω—è—Ç–æ–∫ –ø—Ä–∏ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ñ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞: {e}")
    
    async def process_commands(self):
        """
        –û–±—Ä–æ–±–ª—è—î –∫–æ–º–∞–Ω–¥–∏ –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        """
        if not self.notifier or not self.notifier.session:
            logger.error("–°–ø—Ä–æ–±–∞ –æ–±—Ä–æ–±–∏—Ç–∏ –∫–æ–º–∞–Ω–¥–∏, –∞–ª–µ Telegram Worker –Ω–µ –∑–∞–ø—É—â–µ–Ω–æ")
            return
            
        while True:
            try:
                # –û—Ç—Ä–∏–º—É—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
                url = f"https://api.telegram.org/bot{self.bot_token}/getUpdates"
                params = {
                    "offset": self.last_update_id + 1,
                    "timeout": 30
                }
                
                async with self.notifier.session.post(url, json=params) as response:
                    if response.status == 200:
                        updates = await response.json()
                        
                        if updates.get("ok", False) and "result" in updates:
                            for update in updates["result"]:
                                # –û–Ω–æ–≤–ª—é—î–º–æ last_update_id
                                self.last_update_id = max(self.last_update_id, update.get("update_id", 0))
                                
                                # –û–±—Ä–æ–±–ª—è—î–º–æ –∫–æ–º–∞–Ω–¥—É
                                if "message" in update and "text" in update["message"]:
                                    text = update["message"]["text"]
                                    chat_id = update["message"]["chat"]["id"]
                                    
                                    if text.startswith("/"):
                                        command = text[1:].split(" ")[0]
                                        await self.handle_command(command, chat_id)
                    else:
                        response_text = await response.text()
                        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –æ–Ω–æ–≤–ª–µ–Ω—å: {response.status} - {response_text}")
                
                # –ß–µ–∫–∞—î–º–æ 5 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –Ω–∞—Å—Ç—É–ø–Ω–æ—é –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é
                await asyncio.sleep(5)
                
            except asyncio.CancelledError:
                logger.info("–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥ –∑—É–ø–∏–Ω–µ–Ω–æ")
                break
            except Exception as e:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∫–æ–º–∞–Ω–¥: {e}")
                traceback.print_exc()
                await asyncio.sleep(10)  # –ó–±—ñ–ª—å—à—É—î–º–æ –∑–∞—Ç—Ä–∏–º–∫—É —É –≤–∏–ø–∞–¥–∫—É –ø–æ–º–∏–ª–∫–∏
    
    async def handle_command(self, command: str, chat_id: str):
        """
        –û–±—Ä–æ–±–ª—è—î –∫–æ–º–∞–Ω–¥—É –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        
        Args:
            command (str): –ö–æ–º–∞–Ω–¥–∞
            chat_id (str): ID —á–∞—Ç—É
        """
        logger.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ –∫–æ–º–∞–Ω–¥—É: {command} –≤—ñ–¥ —á–∞—Ç—É {chat_id}")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∫–æ–º–∞–Ω–¥–∞ –≤—ñ–¥ –¥–æ–∑–≤–æ–ª–µ–Ω–æ–≥–æ —á–∞—Ç—É
        if str(chat_id) != self.chat_id:
            logger.warning(f"–û—Ç—Ä–∏–º–∞–Ω–æ –∫–æ–º–∞–Ω–¥—É –≤—ñ–¥ –Ω–µ–¥–æ–∑–≤–æ–ª–µ–Ω–æ–≥–æ —á–∞—Ç—É: {chat_id}")
            return
            
        # –í–∏–∫–ª–∏–∫–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏
        handler = self.command_handlers.get(command)
        if handler:
            try:
                await handler()
            except Exception as e:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∫–æ–º–∞–Ω–¥–∏ {command}: {e}")
                await self.send_message(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∫–æ–º–∞–Ω–¥–∏: {e}", parse_mode="HTML")
        else:
            await self.send_message(f"‚ö†Ô∏è –ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞: {command}", parse_mode="HTML")
    
    async def handle_start_command(self):
        """
        –û–±—Ä–æ–±–ª—è—î –∫–æ–º–∞–Ω–¥—É /start
        """
        global running
        running = True
        await self.send_message("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ —ñ –∞–∫—Ç–∏–≤–Ω–æ —à—É–∫–∞—î –∞—Ä–±—ñ—Ç—Ä–∞–∂–Ω—ñ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ!", parse_mode="HTML")
    
    async def handle_stop_command(self):
        """
        –û–±—Ä–æ–±–ª—è—î –∫–æ–º–∞–Ω–¥—É /stop
        """
        global running
        running = False
        await self.send_message("üõë –ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ. –î–ª—è –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è —Ä–æ–±–æ—Ç–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start", parse_mode="HTML")
    
    async def handle_status_command(self):
        """
        –û–±—Ä–æ–±–ª—è—î –∫–æ–º–∞–Ω–¥—É /status
        """
        try:
            status_info = {}
            
            # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Å—Ç–∞—Ç—É—Å –∑ —Ñ–∞–π–ª—É, —è–∫—â–æ –≤—ñ–Ω —î
            if os.path.exists("status.json"):
                with open("status.json", "r") as f:
                    status_info = json.load(f)
            
            # –§–æ—Ä–º–∞—Ç—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            message = "<b>üìä –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞</b>\n\n"
            
            if status_info:
                # –ó–∞–≥–∞–ª—å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è
                message += f"<b>–í–µ—Ä—Å—ñ—è:</b> {config.VERSION}\n"
                message += f"<b>–°—Ç–∞–Ω:</b> {'üü¢ –ê–∫—Ç–∏–≤–Ω–∏–π' if status_info.get('running', False) else 'üî¥ –ó—É–ø–∏–Ω–µ–Ω–æ'}\n"
                
                # –ß–∞—Å –æ—Å—Ç–∞–Ω–Ω—å–æ—ó –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
                last_check = status_info.get('last_check', '')
                if last_check:
                    try:
                        last_check_dt = datetime.fromisoformat(last_check)
                        last_check_str = last_check_dt.strftime('%Y-%m-%d %H:%M:%S')
                        message += f"<b>–û—Å—Ç–∞–Ω–Ω—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞:</b> {last_check_str}\n"
                    except:
                        message += f"<b>–û—Å—Ç–∞–Ω–Ω—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞:</b> {last_check}\n"
                
                # –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —ñ–Ω—Ç–µ—Ä–≤–∞–ª –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
                check_interval = status_info.get('check_interval', config.CHECK_INTERVAL)
                is_peak_time = status_info.get('is_peak_time', False)
                message += f"<b>–Ü–Ω—Ç–µ—Ä–≤–∞–ª –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏:</b> {check_interval}—Å {'(–ø—ñ–∫–æ–≤—ñ –≥–æ–¥–∏–Ω–∏)' if is_peak_time else ''}\n"
                
                # –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∑–Ω–∞–π–¥–µ–Ω—ñ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ
                opps_found = status_info.get('opportunities_found', 0)
                message += f"<b>–ó–Ω–∞–π–¥–µ–Ω–æ –º–æ–∂–ª–∏–≤–æ—Å—Ç–µ–π:</b> {opps_found}\n"
                
                # –ü–æ–∫–∞–∑—É—î–º–æ —Ç–æ–ø –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ, —è–∫—â–æ —î
                top_opps = status_info.get('top_opportunities', [])
                if top_opps:
                    message += "\n<b>–¢–æ–ø –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ:</b>\n"
                    for i, opp in enumerate(top_opps[:3], 1):
                        symbol = opp.get('symbol', '–Ω–µ–≤—ñ–¥–æ–º–æ')
                        profit = opp.get('net_profit_percent', 0)
                        buy_ex = opp.get('buy_exchange', '')
                        sell_ex = opp.get('sell_exchange', '')
                        
                        if opp.get('opportunity_type') == 'triangular':
                            path = opp.get('path', [])
                            path_str = ' ‚Üí '.join(path) if path else '–Ω–µ–≤—ñ–¥–æ–º–æ'
                            message += f"{i}. <b>{buy_ex}:</b> {path_str} ({profit:.2f}%)\n"
                        else:
                            message += f"{i}. <b>{symbol}:</b> {buy_ex} ‚Üí {sell_ex} ({profit:.2f}%)\n"
            else:
                message += "–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞."
            
            await self.send_message(message, parse_mode="HTML")
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∫–æ–º–∞–Ω–¥–∏ status: {e}")
            await self.send_message(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å—Ç–∞—Ç—É—Å—É: {e}", parse_mode="HTML")
    
    async def handle_stats_command(self):
        """
        –û–±—Ä–æ–±–ª—è—î –∫–æ–º–∞–Ω–¥—É /stats
        """
        try:
            from arbitrage.pair_analyzer import ArbitragePairAnalyzer
            analyzer = ArbitragePairAnalyzer()
            
            message = "<b>üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞—Ä–±—ñ—Ç—Ä–∞–∂—É</b>\n\n"
            
            # –ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            total_opportunities = sum(stats.get('count', 0) for stats in analyzer.pair_stats.values())
            if total_opportunities > 0:
                avg_profit = sum(stats.get('total_net_profit', 0) for stats in analyzer.pair_stats.values()) / total_opportunities
                
                message += f"<b>–í—Å—å–æ–≥–æ –º–æ–∂–ª–∏–≤–æ—Å—Ç–µ–π:</b> {total_opportunities}\n"
                message += f"<b>–°–µ—Ä–µ–¥–Ω—ñ–π —á–∏—Å—Ç–∏–π –ø—Ä–∏–±—É—Ç–æ–∫:</b> {avg_profit:.2f}%\n\n"
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Ç–∏–ø–∞–º–∏
                cross_count = sum(1 for stats in analyzer.pair_stats.values() if stats.get('opportunity_type') == 'cross')
                triangular_count = sum(1 for stats in analyzer.pair_stats.values() if stats.get('opportunity_type') == 'triangular')
                
                message += f"<b>–ö—Ä–æ—Å-–±—ñ—Ä–∂–æ–≤–∏—Ö –º–æ–∂–ª–∏–≤–æ—Å—Ç–µ–π:</b> {cross_count}\n"
                message += f"<b>–¢—Ä–∏–∫—É—Ç–Ω–∏—Ö –º–æ–∂–ª–∏–≤–æ—Å—Ç–µ–π:</b> {triangular_count}\n"
                
                # –ù–∞–π–∫—Ä–∞—â—ñ –ø–∞—Ä–∏/—à–ª—è—Ö–∏
                top_cross = analyzer.get_top_pairs(3, "cross")
                top_triangular = analyzer.get_top_pairs(3, "triangular")
                
                if top_cross:
                    message += "\n<b>–ù–∞–π–∫—Ä–∞—â—ñ –∫—Ä–æ—Å-–±—ñ—Ä–∂–æ–≤—ñ –ø–∞—Ä–∏:</b>\n"
                    for i, stats in enumerate(top_cross, 1):
                        symbol = stats.get('symbol', '–Ω–µ–≤—ñ–¥–æ–º–æ')
                        buy_ex = stats.get('buy_exchange', '')
                        sell_ex = stats.get('sell_exchange', '')
                        avg_net = stats.get('avg_net_profit', 0)
                        count = stats.get('count', 0)
                        
                        message += f"{i}. <b>{symbol}:</b> {buy_ex} ‚Üí {sell_ex} "
                        message += f"(—Å—Ä–¥. {avg_net:.2f}%, {count} —Ä–∞–∑—ñ–≤)\n"
                
                if top_triangular:
                    message += "\n<b>–ù–∞–π–∫—Ä–∞—â—ñ —Ç—Ä–∏–∫—É—Ç–Ω—ñ —à–ª—è—Ö–∏:</b>\n"
                    for i, stats in enumerate(top_triangular, 1):
                        exchange = stats.get('exchange', '')
                        path = stats.get('path', [])
                        path_str = ' ‚Üí '.join(path) if path else '–Ω–µ–≤—ñ–¥–æ–º–æ'
                        avg_net = stats.get('avg_net_profit', 0)
                        count = stats.get('count', 0)
                        
                        message += f"{i}. <b>{exchange}:</b> {path_str} "
                        message += f"(—Å—Ä–¥. {avg_net:.2f}%, {count} —Ä–∞–∑—ñ–≤)\n"
            else:
                message += "–ü–æ–∫–∏ —â–æ –Ω–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."
            
            await self.send_message(message, parse_mode="HTML")
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∫–æ–º–∞–Ω–¥–∏ stats: {e}")
            await self.send_message(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}", parse_mode="HTML")
    
    async def handle_top_command(self):
        """
        –û–±—Ä–æ–±–ª—è—î –∫–æ–º–∞–Ω–¥—É /top
        """
        try:
            # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Å—Ç–∞—Ç—É—Å –∑ —Ñ–∞–π–ª—É, —è–∫—â–æ –≤—ñ–Ω —î
            if os.path.exists("status.json"):
                with open("status.json", "r") as f:
                    status_info = json.load(f)
                
                # –ü–æ–∫–∞–∑—É—î–º–æ —Ç–æ–ø –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ
                top_opps = status_info.get('top_opportunities', [])
                
                if top_opps:
                    message = "<b>üèÜ –¢–æ–ø –∞—Ä–±—ñ—Ç—Ä–∞–∂–Ω–∏—Ö –º–æ–∂–ª–∏–≤–æ—Å—Ç–µ–π</b>\n\n"
                    
                    for i, opp in enumerate(top_opps, 1):
                        symbol = opp.get('symbol', '–Ω–µ–≤—ñ–¥–æ–º–æ')
                        profit = opp.get('net_profit_percent', 0)
                        buy_ex = opp.get('buy_exchange', '')
                        sell_ex = opp.get('sell_exchange', '')
                        
                        # –í–∏–∑–Ω–∞—á–∞—î–º–æ –µ–º–æ–¥–∑—ñ –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –ø—Ä–∏–±—É—Ç–∫—É
                        profit_emoji = "üî•" if profit > 1.5 else "üí∞" if profit > 0.8 else "üí∏"
                        
                        if opp.get('opportunity_type') == 'triangular':
                            path = opp.get('path', [])
                            path_str = ' ‚Üí '.join(path) if path else '–Ω–µ–≤—ñ–¥–æ–º–æ'
                            message += f"{i}. {profit_emoji} <b>{buy_ex}:</b> {path_str} ({profit:.2f}%)\n"
                        else:
                            message += f"{i}. {profit_emoji} <b>{symbol}:</b> {buy_ex} ‚Üí {sell_ex} ({profit:.2f}%)\n"
                else:
                    message = "‚ö†Ô∏è –ù–∞ –¥–∞–Ω–∏–π –º–æ–º–µ–Ω—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞—Ä–±—ñ—Ç—Ä–∞–∂–Ω–∏—Ö –º–æ–∂–ª–∏–≤–æ—Å—Ç–µ–π."
                
                await self.send_message(message, parse_mode="HTML")
            else:
                await self.send_message("‚ö†Ô∏è –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –∞—Ä–±—ñ—Ç—Ä–∞–∂–Ω—ñ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ.", parse_mode="HTML")
                
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∫–æ–º–∞–Ω–¥–∏ top: {e}")
            await self.send_message(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Ç–æ–ø –º–æ–∂–ª–∏–≤–æ—Å—Ç–µ–π: {e}", parse_mode="HTML")
