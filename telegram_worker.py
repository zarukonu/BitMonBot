# telegram_worker.py
import asyncio
import logging
from typing import Optional, Dict, Any
import time
import config
from notifier.telegram_notifier import TelegramNotifier

logger = logging.getLogger('telegram')

class TelegramWorker:
    """
    –í–æ—Ä–∫–µ—Ä –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—ó –æ–±—Ä–æ–±–∫–∏ —á–µ—Ä–≥–∏ Telegram-–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
    """
    def __init__(self, bot_token: str, chat_id: str):
        self.bot_token = bot_token
        self.chat_id = chat_id
        self.queue: Optional[asyncio.Queue] = None
        self.notifier: Optional[TelegramNotifier] = None
        self.worker_task: Optional[asyncio.Task] = None
        self.monitoring_task: Optional[asyncio.Task] = None
        self.start_time = time.time()
        self.messages_sent = 0
        self.messages_failed = 0
        
    async def start(self):
        """
        –ó–∞–ø—É—Å–∫–∞—î –≤–æ—Ä–∫–µ—Ä
        """
        # –°—Ç–≤–æ—Ä—é—î–º–æ —á–µ—Ä–≥—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
        self.queue = asyncio.Queue()
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä
        self.notifier = TelegramNotifier(self.bot_token, self.chat_id, self.queue)
        await self.notifier.initialize()
        
        # –ó–∞–ø—É—Å–∫–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ —á–µ—Ä–≥–∏
        self.worker_task = asyncio.create_task(self.notifier.process_queue())
        
        # –ó–∞–ø—É—Å–∫–∞—î–º–æ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ —á–µ—Ä–≥–∏
        self.monitoring_task = asyncio.create_task(self._monitor_queue())
        
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —Å—Ç–∞—Ä—Ç –±–æ—Ç–∞
        await self.notifier.send_formatted_message(config.START_MESSAGE)
        
        logger.info("Telegram Worker —É—Å–ø—ñ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–æ")
        
    async def stop(self):
        """
        –ó—É–ø–∏–Ω—è—î –≤–æ—Ä–∫–µ—Ä
        """
        logger.info("–ó—É–ø–∏–Ω–∫–∞ Telegram Worker...")
        
        if self.monitoring_task:
            self.monitoring_task.cancel()
            try:
                await self.monitoring_task
            except asyncio.CancelledError:
                pass
            self.monitoring_task = None
        
        if self.worker_task:
            self.worker_task.cancel()
            try:
                await self.worker_task
            except asyncio.CancelledError:
                pass
            self.worker_task = None
            
        if self.notifier:
            await self.notifier.close()
            self.notifier = None
            
        logger.info("Telegram Worker —É—Å–ø—ñ—à–Ω–æ –∑—É–ø–∏–Ω–µ–Ω–æ")
        
    async def send_message(self, message: str, parse_mode: Optional[str] = None) -> bool:
        """
        –î–æ–¥–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–æ —á–µ—Ä–≥–∏ –Ω–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫—É
        """
        if not self.notifier:
            logger.error("–°–ø—Ä–æ–±–∞ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –∞–ª–µ Telegram Worker –Ω–µ –∑–∞–ø—É—â–µ–Ω–æ")
            return False
            
        if parse_mode:
            return await self.notifier.send_formatted_message(message, parse_mode)
        else:
            return await self.notifier.send_message(message)
            
    async def get_queue_info(self) -> Dict[str, Any]:
        """
        –ü–æ–≤–µ—Ä—Ç–∞—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Å—Ç–∞–Ω —á–µ—Ä–≥–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
        """
        if not self.queue:
            return {
                "status": "not_initialized",
                "queue_size": 0,
                "uptime_seconds": 0,
                "messages_sent": 0,
                "messages_failed": 0
            }
            
        return {
            "status": "running",
            "queue_size": self.queue.qsize(),
            "uptime_seconds": int(time.time() - self.start_time),
            "messages_sent": self.messages_sent,
            "messages_failed": self.messages_failed
        }
        
    async def send_queue_status(self):
        """
        –í—ñ–¥–ø—Ä–∞–≤–ª—è—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Å—Ç–∞–Ω —á–µ—Ä–≥–∏ –≤ Telegram
        """
        if not self.notifier:
            logger.error("–ù–µ–º–æ–∂–ª–∏–≤–æ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å —á–µ—Ä–≥–∏ - Telegram Worker –Ω–µ –∑–∞–ø—É—â–µ–Ω–æ")
            return False
            
        queue_info = await self.get_queue_info()
        uptime_hours = queue_info["uptime_seconds"] // 3600
        uptime_minutes = (queue_info["uptime_seconds"] % 3600) // 60
        uptime_seconds = queue_info["uptime_seconds"] % 60
        
        status_message = (
            f"<b>üìä –°—Ç–∞—Ç—É—Å Telegram —Å–µ—Ä–≤—ñ—Å—É</b>\n\n"
            f"<b>–°—Ç–∞–Ω:</b> {'–ü—Ä–∞—Ü—é—î' if queue_info['status'] == 'running' else '–ù–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ'}\n"
            f"<b>–†–æ–∑–º—ñ—Ä —á–µ—Ä–≥–∏:</b> {queue_info['queue_size']} –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å\n"
            f"<b>–ß–∞—Å —Ä–æ–±–æ—Ç–∏:</b> {uptime_hours:02d}:{uptime_minutes:02d}:{uptime_seconds:02d}\n"
            f"<b>–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å:</b> {queue_info['messages_sent']}\n"
            f"<b>–ù–µ–≤–¥–∞–ª–∏—Ö –≤—ñ–¥–ø—Ä–∞–≤–æ–∫:</b> {queue_info['messages_failed']}"
        )
        
        return await self.notifier.send_formatted_message(status_message, parse_mode="HTML")
        
    async def _monitor_queue(self):
        """
        –ü–µ—Ä—ñ–æ–¥–∏—á–Ω–æ –º–æ–Ω—ñ—Ç–æ—Ä–∏—Ç—å —Å—Ç–∞–Ω —á–µ—Ä–≥–∏ —Ç–∞ –ª–æ–≥—É—î —ó—ó —Å—Ç–∞—Ç—É—Å
        """
        try:
            while True:
                queue_info = await self.get_queue_info()
                logger.info(f"–°—Ç–∞—Ç—É—Å —á–µ—Ä–≥–∏: {queue_info['queue_size']} –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –≤ —á–µ—Ä–∑—ñ, "
                           f"{queue_info['messages_sent']} –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ, "
                           f"{queue_info['messages_failed']} –Ω–µ–≤–¥–∞–ª–∏—Ö")
                
                # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Å—Ç–∞—Ç—É—Å —É Telegram —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ —î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ —á–µ—Ä–∑—ñ
                # –∞–±–æ –º–∏–Ω—É–≤ –ø–µ–≤–Ω–∏–π —á–∞—Å –∑ –º–æ–º–µ–Ω—Ç—É –æ—Å—Ç–∞–Ω–Ω—å–æ—ó –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
                if queue_info['queue_size'] > 5:
                    await self.send_queue_status()
                    
                await asyncio.sleep(config.QUEUE_STATUS_INTERVAL)
        except asyncio.CancelledError:
            logger.info("–ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ —á–µ—Ä–≥–∏ –∑—É–ø–∏–Ω–µ–Ω–æ")
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É —á–µ—Ä–≥–∏: {e}")
