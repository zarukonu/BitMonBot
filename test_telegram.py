#!/usr/bin/env python3
# test_telegram.py
import asyncio
import aiohttp
import sys
import os
import json
from datetime import datetime
import logging

# –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ —à–ª—è—Ö –¥–æ –ø—Ä–æ—î–∫—Ç—É
script_dir = os.path.dirname(os.path.abspath(__file__))
if script_dir not in sys.path:
    sys.path.append(script_dir)

# –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger('test_telegram')

# –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é
try:
    import config
    TELEGRAM_BOT_TOKEN = config.TELEGRAM_BOT_TOKEN
    TELEGRAM_CHAT_ID = config.TELEGRAM_CHAT_ID
except ImportError as e:
    logger.error(f"–ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó: {e}")
    sys.exit(1)

async def test_telegram_api():
    """
    –ü–µ—Ä–µ–≤—ñ—Ä—è—î –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ Telegram API
    """
    logger.info("–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ Telegram API...")
    
    try:
        async with aiohttp.ClientSession() as session:
            url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/getMe"
            async with session.get(url) as response:
                if response.status == 200:
                    data = await response.json()
                    if data.get("ok"):
                        bot_info = data["result"]
                        logger.info(f"–ó'—î–¥–Ω–∞–Ω–Ω—è –∑ Telegram API —É—Å–ø—ñ—à–Ω–µ!")
                        logger.info(f"–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –±–æ—Ç–∞:")
                        logger.info(f"ID: {bot_info.get('id')}")
                        logger.info(f"–õ–æ–≥—ñ–Ω: @{bot_info.get('username')}")
                        logger.info(f"–Ü–º'—è: {bot_info.get('first_name')}")
                        return True
                    else:
                        logger.error(f"–ü–æ–º–∏–ª–∫–∞ API Telegram: {data.get('description', '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞')}")
                else:
                    logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ Telegram API: {response.status} - {await response.text()}")
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ Telegram API: {e}")
    
    return False

async def send_test_message():
    """
    –ù–∞–¥—Å–∏–ª–∞—î —Ç–µ—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —á–µ—Ä–µ–∑ Telegram API
    """
    logger.info("–ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è...")
    
    try:
        async with aiohttp.ClientSession() as session:
            url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
            timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            data = {
                "chat_id": TELEGRAM_CHAT_ID,
                "text": f"üß™ <b>–¢–µ—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è</b>\n\n–¶–µ —Ç–µ—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ä–æ–±–æ—Ç–∏ Telegram API.\n–ß–∞—Å: {timestamp}",
                "parse_mode": "HTML"
            }
            
            async with session.post(url, json=data) as response:
                if response.status == 200:
                    logger.info("–¢–µ—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ!")
                    return True
                else:
                    logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {response.status} - {await response.text()}")
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")
    
    return False

async def check_updates():
    """
    –ü–µ—Ä–µ–≤—ñ—Ä—è—î –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –æ–Ω–æ–≤–ª–µ–Ω—å –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
    """
    logger.info("–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –æ–Ω–æ–≤–ª–µ–Ω—å –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤...")
    
    try:
        async with aiohttp.ClientSession() as session:
            url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/getUpdates?limit=5"
            async with session.get(url) as response:
                if response.status == 200:
                    data = await response.json()
                    if data.get("ok"):
                        updates = data.get("result", [])
                        logger.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ {len(updates)} –æ–Ω–æ–≤–ª–µ–Ω—å")
                        
                        if updates:
                            for update in updates:
                                update_id = update.get("update_id")
                                message = update.get("message")
                                
                                if message:
                                    chat_id = message.get("chat", {}).get("id")
                                    text = message.get("text", "")
                                    from_user = message.get("from", {})
                                    username = from_user.get("username", "")
                                    first_name = from_user.get("first_name", "")
                                    
                                    logger.info(f"–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è #{update_id} –≤—ñ–¥ {first_name} (@{username}): {text}")
                        else:
                            logger.info("–ù–µ–º–∞—î –Ω–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å")
                        
                        return True
                    else:
                        logger.error(f"–ü–æ–º–∏–ª–∫–∞ API Telegram: {data.get('description', '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞')}")
                else:
                    logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –æ–Ω–æ–≤–ª–µ–Ω—å: {response.status} - {await response.text()}")
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ –æ–Ω–æ–≤–ª–µ–Ω—å: {e}")
    
    return False

async def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è
    """
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ Telegram API
    api_ok = await test_telegram_api()
    
    if not api_ok:
        logger.error("–ü–æ–º–∏–ª–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ Telegram API. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞.")
        return
    
    # –ù–∞–¥—Å–∏–ª–∞—î–º–æ —Ç–µ—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    send_ok = await send_test_message()
    
    if not send_ok:
        logger.error("–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —Ç–µ—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ ID —á–∞—Ç—É —Ç–∞ –ø—Ä–∞–≤–∞ –±–æ—Ç–∞.")
        return
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
    updates_ok = await check_updates()
    
    if not updates_ok:
        logger.error("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥ Telegram API.")
        return
    
    logger.info("–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è Telegram –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    asyncio.run(main())
