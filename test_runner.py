# test_runner.py
import asyncio
import logging
import sys
import random
from datetime import datetime

import config
import logger
from telegram_worker import TelegramWorker
from arbitrage.opportunity import ArbitrageOpportunity

# –û—Ç—Ä–∏–º—É—î–º–æ –ª–æ–≥–µ—Ä
test_logger = logging.getLogger('main')

async def test_telegram_notifications():
    """
    –¢–µ—Å—Ç—É—î –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —É Telegram
    """
    telegram_worker = TelegramWorker(config.TELEGRAM_BOT_TOKEN, config.TELEGRAM_CHAT_ID)
    
    try:
        # –ó–∞–ø—É—Å–∫–∞—î–º–æ Telegram Worker
        await telegram_worker.start()
        
        test_logger.info("–¢–µ—Å—Ç —Ä–æ–∑–ø–æ—á–∞—Ç–æ")
        
        # –î–æ–¥–∞—î–º–æ —Ç–µ—Å—Ç–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ —á–µ—Ä–≥—É
        await telegram_worker.send_message("üß™ –¢–µ—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è 1")
        await telegram_worker.send_message("üß™ –¢–µ—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è 2")
        
        # –î–æ–¥–∞—î–º–æ —Ñ–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        await telegram_worker.send_message(
            "<b>–§–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è</b>\n"
            "<i>–ö—É—Ä—Å–∏–≤–Ω–∏–π —Ç–µ–∫—Å—Ç</i>\n"
            "<code>–ö–æ–¥</code>",
            parse_mode="HTML"
        )
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–µ—Å—Ç–æ–≤—ñ –∞—Ä–±—ñ—Ç—Ä–∞–∂–Ω—ñ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ
        pairs = ["BTC/USDT", "ETH/USDT", "XRP/USDT", "SOL/USDT", "BNB/USDT"]
        exchanges = ["Binance", "KuCoin", "Kraken"]
        
        # –î–æ–¥–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑ –∫–æ–º—ñ—Å—ñ—è–º–∏
        await telegram_worker.send_message(
            "<b>üß™ –ü–æ—á–∞—Ç–æ–∫ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∞—Ä–±—ñ—Ç—Ä–∞–∂–Ω–∏—Ö –º–æ–∂–ª–∏–≤–æ—Å—Ç–µ–π</b>\n"
            "–ë—É–¥–µ —Å—Ç–≤–æ—Ä–µ–Ω–æ –∫—ñ–ª—å–∫–∞ —Ç–µ—Å—Ç–æ–≤–∏—Ö –∞—Ä–±—ñ—Ç—Ä–∞–∂–Ω–∏—Ö –º–æ–∂–ª–∏–≤–æ—Å—Ç–µ–π –∑ —Ä—ñ–∑–Ω–∏–º–∏ –∫–æ–º—ñ—Å—ñ—è–º–∏",
            parse_mode="HTML"
        )
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –∫–æ–º—ñ—Å—ñ—ó –∑ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –¥–ª—è —Ä–µ–∞–ª—ñ—Å—Ç–∏—á–Ω–∏—Ö —Ç–µ—Å—Ç—ñ–≤
        fee_configs = {
            "Binance": {
                "buy": config.EXCHANGE_FEES["binance"][config.BUY_FEE_TYPE],
                "sell": config.EXCHANGE_FEES["binance"][config.SELL_FEE_TYPE]
            },
            "KuCoin": {
                "buy": config.EXCHANGE_FEES["kucoin"][config.BUY_FEE_TYPE],
                "sell": config.EXCHANGE_FEES["kucoin"][config.SELL_FEE_TYPE]
            },
            "Kraken": {
                "buy": config.EXCHANGE_FEES["kraken"][config.BUY_FEE_TYPE],
                "sell": config.EXCHANGE_FEES["kraken"][config.SELL_FEE_TYPE]
            }
        }
        
        # –ì–µ–Ω–µ—Ä—É—î–º–æ –∫—ñ–ª—å–∫–∞ –∞—Ä–±—ñ—Ç—Ä–∞–∂–Ω–∏—Ö –º–æ–∂–ª–∏–≤–æ—Å—Ç–µ–π –∑ —Ä—ñ–∑–Ω–∏–º —Ä—ñ–≤–Ω–µ–º –ø—Ä–∏–±—É—Ç–∫–æ–≤–æ—Å—Ç—ñ
        profit_scenarios = [
            {"profit": random.uniform(0.5, 0.9), "type": "–Ω–∏–∑—å–∫–æ–≥–æ"},
            {"profit": random.uniform(1.0, 1.9), "type": "—Å–µ—Ä–µ–¥–Ω—å–æ–≥–æ"},
            {"profit": random.uniform(2.0, 4.9), "type": "–≤–∏—Å–æ–∫–æ–≥–æ"},
            {"profit": random.uniform(5.0, 10.0), "type": "–Ω–∞–¥–≤–∏—Å–æ–∫–æ–≥–æ"}
        ]
        
        for scenario in profit_scenarios:
            # –í–∏–ø–∞–¥–∫–æ–≤–æ –≤–∏–±–∏—Ä–∞—î–º–æ –ø–∞—Ä—É —Ç–∞ –±—ñ—Ä–∂—ñ
            pair = random.choice(pairs)
            buy_exchange = random.choice(exchanges)
            
            # –í–∏–±–∏—Ä–∞—î–º–æ —ñ–Ω—à—É –±—ñ—Ä–∂—É –¥–ª—è –ø—Ä–æ–¥–∞–∂—É
            available_exchanges = [e for e in exchanges if e != buy_exchange]
            sell_exchange = random.choice(available_exchanges)
            
            # –ì–µ–Ω–µ—Ä—É—î–º–æ —Ü—ñ–Ω—É –∫—É–ø—ñ–≤–ª—ñ (—Ä–µ–∞–ª—ñ—Å—Ç–∏—á–Ω–∞ –¥–ª—è –æ–±—Ä–∞–Ω–æ—ó –ø–∞—Ä–∏)
            base_price = get_realistic_price(pair)
            buy_price = base_price * random.uniform(0.98, 1.0)
            
            # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ü—ñ–Ω—É –ø—Ä–æ–¥–∞–∂—É –Ω–∞ –æ—Å–Ω–æ–≤—ñ –±–∞–∂–∞–Ω–æ–≥–æ –ø—Ä–∏–±—É—Ç–∫—É
            profit_percent = scenario["profit"]
            sell_price = buy_price * (1 + profit_percent / 100)
            
            # –û—Ç—Ä–∏–º—É—î–º–æ –∫–æ–º—ñ—Å—ñ—ó –¥–ª—è –æ–±—Ä–∞–Ω–∏—Ö –±—ñ—Ä–∂
            buy_fee = fee_configs[buy_exchange]["buy"]
            sell_fee = fee_configs[sell_exchange]["sell"]
            
            # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ —á–∏—Å—Ç–∏–π –ø—Ä–∏–±—É—Ç–æ–∫
            buy_with_fee = buy_price * (1 + buy_fee / 100)
            sell_with_fee = sell_price * (1 - sell_fee / 100)
            net_profit_percent = (sell_with_fee - buy_with_fee) / buy_with_fee * 100
            
            opportunity = ArbitrageOpportunity(
                symbol=pair,
                buy_exchange=buy_exchange,
                sell_exchange=sell_exchange,
                buy_price=buy_price,
                sell_price=sell_price,
                profit_percent=profit_percent,
                buy_fee=buy_fee,
                sell_fee=sell_fee,
                net_profit_percent=net_profit_percent,
                buy_fee_type=config.BUY_FEE_TYPE,
                sell_fee_type=config.SELL_FEE_TYPE
            )
            
            # –î–æ–¥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ–π–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —Ç–∏–ø —Ç–µ—Å—Ç—É
            await telegram_worker.send_message(
                f"<b>üß™ –¢–µ—Å
