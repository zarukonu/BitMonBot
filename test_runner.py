# test_runner.py
import asyncio
import logging
import sys
import random
import os
from datetime import datetime

import config
import logger
from telegram_worker import TelegramWorker
from arbitrage.opportunity import ArbitrageOpportunity

# –û—Ç—Ä–∏–º—É—î–º–æ –ª–æ–≥–µ—Ä
test_logger = logging.getLogger('main')

async def test_telegram_notifications():
    """
    –¢–µ—Å—Ç—É—î –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —É Telegram
    """
    telegram_worker = TelegramWorker(config.TELEGRAM_BOT_TOKEN, config.TELEGRAM_CHAT_ID)
    
    try:
        # –ó–∞–ø—É—Å–∫–∞—î–º–æ Telegram Worker
        await telegram_worker.start()
        
        test_logger.info("–¢–µ—Å—Ç —Ä–æ–∑–ø–æ—á–∞—Ç–æ")
        
        # –î–æ–¥–∞—î–º–æ —Ç–µ—Å—Ç–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ —á–µ—Ä–≥—É
        await telegram_worker.send_message("üß™ –¢–µ—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è 1")
        await telegram_worker.send_message("üß™ –¢–µ—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è 2")
        
        # –î–æ–¥–∞—î–º–æ —Ñ–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        await telegram_worker.send_message(
            "<b>–§–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è</b>\n"
            "<i>–ö—É—Ä—Å–∏–≤–Ω–∏–π —Ç–µ–∫—Å—Ç</i>\n"
            "<code>–ö–æ–¥</code>",
            parse_mode="HTML"
        )
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–µ—Å—Ç–æ–≤—ñ –∞—Ä–±—ñ—Ç—Ä–∞–∂–Ω—ñ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ
        pairs = config.PAIRS  # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø–∞—Ä–∏ –∑ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
        exchanges = ["Binance", "KuCoin", "Kraken"]
        
        for _ in range(3):
            pair = random.choice(pairs)
            buy_exchange = random.choice(exchanges)
            
            # –í–∏–±–∏—Ä–∞—î–º–æ —ñ–Ω—à—É –±—ñ—Ä–∂—É –¥–ª—è –ø—Ä–æ–¥–∞–∂—É
            available_exchanges = [e for e in exchanges if e != buy_exchange]
            sell_exchange = random.choice(available_exchanges)
            
            # –ì–µ–Ω–µ—Ä—É—î–º–æ —Ü—ñ–Ω–∏ –∑ —Ö–æ—Ä–æ—à–æ—é –∞—Ä–±—ñ—Ç—Ä–∞–∂–Ω–æ—é –º–æ–∂–ª–∏–≤—ñ—Å—Ç—é
            buy_price = random.uniform(10, 50000)
            profit_percent = random.uniform(1.0, 5.0)
            sell_price = buy_price * (1 + profit_percent / 100)
            
            # –î–æ–¥–∞—î–º–æ –∫–æ–º—ñ—Å—ñ—ó –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
            buy_fee = config.EXCHANGE_FEES[buy_exchange.lower()][config.BUY_FEE_TYPE]
            sell_fee = config.EXCHANGE_FEES[sell_exchange.lower()][config.SELL_FEE_TYPE]
            
            # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ —á–∏—Å—Ç–∏–π –ø—Ä–∏–±—É—Ç–æ–∫
            buy_with_fee = buy_price * (1 + buy_fee / 100)
            sell_with_fee = sell_price * (1 - sell_fee / 100)
            net_profit_percent = (sell_with_fee - buy_with_fee) / buy_with_fee * 100
            
            opportunity = ArbitrageOpportunity(
                symbol=pair,
                buy_exchange=buy_exchange,
                sell_exchange=sell_exchange,
                buy_price=buy_price,
                sell_price=sell_price,
                profit_percent=profit_percent,
                buy_fee=buy_fee,
                sell_fee=sell_fee,
                net_profit_percent=net_profit_percent,
                buy_fee_type=config.BUY_FEE_TYPE,
                sell_fee_type=config.SELL_FEE_TYPE
            )
            
            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Ñ–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –∞—Ä–±—ñ—Ç—Ä–∞–∂–Ω—É –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å
            await telegram_worker.send_message(
                opportunity.to_message(),
                parse_mode="HTML"
            )
            
            # –ß–µ–∫–∞—î–º–æ 2 —Å–µ–∫—É–Ω–¥–∏ –º—ñ–∂ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º–∏
            await asyncio.sleep(2)
        
        # –ß–µ–∫–∞—î–º–æ, –ø–æ–∫–∏ –≤—Å—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±—É–¥—É—Ç—å –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω—ñ
        await telegram_worker.queue.join()
        
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ç–µ—Å—Ç—É
        await telegram_worker.send_message("‚úÖ –¢–µ—Å—Ç —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
        
        # –ó–Ω–æ–≤—É —á–µ–∫–∞—î–º–æ –Ω–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫—É –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        await telegram_worker.queue.join()
        
        test_logger.info("–¢–µ—Å—Ç —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
        
    except Exception as e:
        test_logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —Ç–µ—Å—Ç—É: {e}")
    finally:
        # –ó—É–ø–∏–Ω—è—î–º–æ Telegram Worker
        await telegram_worker.stop()

if __name__ == "__main__":
    try:
        # –°—Ç–≤–æ—Ä—é—î–º–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó –¥–ª—è –ª–æ–≥—ñ–≤
        os.makedirs(os.path.dirname(config.MAIN_LOG_FILE), exist_ok=True)
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —á–∞—Å –ø–æ—á–∞—Ç–∫—É —Ç–µ—Å—Ç—É
        start_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        test_logger.info(f"–ü–æ—á–∞—Ç–æ–∫ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è {config.APP_NAME} –æ {start_time}")
        
        loop = asyncio.get_event_loop()
        loop.run_until_complete(test_telegram_notifications())
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —á–∞—Å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ç–µ—Å—Ç—É
        end_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        test_logger.info(f"–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è {config.APP_NAME} –æ {end_time}")
    except KeyboardInterrupt:
        test_logger.info("–¢–µ—Å—Ç –∑—É–ø–∏–Ω–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
    except Exception as e:
        test_logger.error(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —Ç–µ—Å—Ç—É: {e}")
    finally:
        if loop and not loop.is_closed():
            loop.close()
