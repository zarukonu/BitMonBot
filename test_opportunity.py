# test_opportunity.py
import asyncio
import logging
import sys
from datetime import datetime

import config
import logger
from telegram_worker import TelegramWorker
from arbitrage.opportunity import ArbitrageOpportunity
from user_manager import UserManager

# –û—Ç—Ä–∏–º—É—î–º–æ –ª–æ–≥–µ—Ä
test_logger = logging.getLogger('main')

async def test_opportunity_notification():
    """
    –¢–µ—Å—Ç—É—î –≤—ñ–¥–ø—Ä–∞–≤–∫—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –∞—Ä–±—ñ—Ç—Ä–∞–∂–Ω—É –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å
    """
    telegram_worker = TelegramWorker(config.TELEGRAM_BOT_TOKEN, config.TELEGRAM_CHAT_ID)
    
    try:
        # –ó–∞–ø—É—Å–∫–∞—î–º–æ Telegram Worker
        await telegram_worker.start()
        
        test_logger.info("–¢–µ—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –ø—Ä–æ –∞—Ä–±—ñ—Ç—Ä–∞–∂–Ω—ñ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ —Ä–æ–∑–ø–æ—á–∞—Ç–æ")
        
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Å—Ç–∞—Ä—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É
        await telegram_worker.send_message(
            "üîç –ó–∞–ø—É—â–µ–Ω–æ —Ç–µ—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –ø—Ä–æ –∞—Ä–±—ñ—Ç—Ä–∞–∂–Ω—ñ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ.",
            config.TELEGRAM_CHAT_ID
        )
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–µ—Å—Ç–æ–≤—É –∞—Ä–±—ñ—Ç—Ä–∞–∂–Ω—É –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –∑ –ø—Ä–∏–±—É—Ç–∫–æ–º 0.6%
        opportunity = ArbitrageOpportunity(
            symbol="BTC/USDT",
            buy_exchange="Binance",
            sell_exchange="Kraken",
            buy_price=40000.0,
            sell_price=40240.0,  # ~0.6% –ø—Ä–∏–±—É—Ç–∫—É
            profit_percent=0.6,
            buy_fee=0.1,  # 0.1% –∫–æ–º—ñ—Å—ñ—è –Ω–∞ Binance (taker)
            sell_fee=0.26,  # 0.26% –∫–æ–º—ñ—Å—ñ—è –Ω–∞ Kraken (taker)
            net_profit_percent=0.24,  # 0.6% - –∫–æ–º—ñ—Å—ñ—ó
            buy_fee_type="taker",
            sell_fee_type="taker"
        )
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
        user_manager = UserManager()
        active_users = user_manager.get_active_approved_users()
        test_logger.info(f"–ó–Ω–∞–π–¥–µ–Ω–æ {len(active_users)} –∞–∫—Ç–∏–≤–Ω–∏—Ö —Å—Ö–≤–∞–ª–µ–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤")
        
        # –õ–æ–≥—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        for user_id, user_data in active_users.items():
            pairs = user_data.get("pairs", [])
            min_profit = user_data.get("min_profit", config.DEFAULT_MIN_PROFIT)
            test_logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id}: {len(pairs)} –ø–∞—Ä, –º—ñ–Ω. –ø—Ä–∏–±—É—Ç–æ–∫ {min_profit}%")
            
            # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø—ñ–¥–ø–∏—Å–∞–Ω–∏–π –Ω–∞ BTC/USDT, –ª–æ–≥—É—î–º–æ –¥–µ—Ç–∞–ª—å–Ω—ñ—à–µ
            if "BTC/USDT" in pairs:
                test_logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –ø—ñ–¥–ø–∏—Å–∞–Ω–∏–π –Ω–∞ BTC/USDT!")
            
        # –ì–µ–Ω–µ—Ä—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        message = opportunity.to_message()
        test_logger.info(f"–°—Ñ–æ—Ä–º–æ–≤–∞–Ω–æ —Ç–µ—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å: {opportunity.symbol}, {opportunity.profit_percent}%")
        
        # 1. –ü—Ä—è–º–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É
        test_logger.info("–¢–µ—Å—Ç 1: –ü—Ä—è–º–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É")
        await telegram_worker.send_message(
            f"üìä –¢–ï–°–¢: –ü—Ä—è–º–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É:\n\n{message}",
            config.TELEGRAM_CHAT_ID,
            parse_mode="HTML"
        )
        test_logger.info(f"–ü—Ä—è–º–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ")
        
        # –ù–µ–≤–µ–ª–∏–∫–∞ –ø–∞—É–∑–∞ –º—ñ–∂ –≤—ñ–¥–ø—Ä–∞–≤–∫–∞–º–∏
        await asyncio.sleep(2)
        
        # 2. –°–ø—Ä–æ–±–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ –º–µ—Ç–æ–¥ notify_about_opportunity
        test_logger.info("–¢–µ—Å—Ç 2: –í—ñ–¥–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ notify_about_opportunity")
        notification_result = await telegram_worker.notify_about_opportunity(message)
        test_logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç notify_about_opportunity: {notification_result}")
        
        # 3. –¢–µ—Å—Ç —ñ–∑ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–æ —Å—Ñ–æ—Ä–º–æ–≤–∞–Ω–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è
        test_logger.info("–¢–µ—Å—Ç 3: –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±–µ–∑ HTML-—Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è")
        simple_message = (
            f"üîç –ê—Ä–±—ñ—Ç—Ä–∞–∂–Ω–∞ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å (0.6%)\n\n"
            f"–ü–∞—Ä–∞: BTC/USDT\n"
            f"–ö—É–ø–∏—Ç–∏ –Ω–∞: Binance –∑–∞ 40000.00000000\n"
            f"–ü—Ä–æ–¥–∞—Ç–∏ –Ω–∞: Kraken –∑–∞ 40240.00000000\n"
            f"–ü—Ä–∏–±—É—Ç–æ–∫: 0.60%\n"
            f"–ß–∞—Å: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
        )
        simple_result = await telegram_worker.notify_about_opportunity(simple_message)
        test_logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ—Å—Ç–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {simple_result}")
        
        # 4. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ broadcast_message
        test_logger.info("–¢–µ—Å—Ç 4: –í—ñ–¥–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ broadcast_message")
        broadcast_result = await telegram_worker.broadcast_message(
            "üì¢ –¢–ï–°–¢: –®–∏—Ä–æ–∫–æ–º–æ–≤–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤",
            parse_mode="HTML"
        )
        test_logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç broadcast_message: {broadcast_result}")
        
        # –ß–µ–∫–∞—î–º–æ, –ø–æ–∫–∏ –≤—Å—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±—É–¥—É—Ç—å –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω—ñ
        await telegram_worker.queue.join()
        test_logger.info("–í—Å—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ —á–µ—Ä–∑—ñ –æ–±—Ä–æ–±–ª–µ–Ω–æ")
        
        # –ü—ñ–¥—Å—É–º–∫–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        await telegram_worker.send_message(
            "‚úÖ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∑–∞–≤–µ—Ä—à–µ–Ω–æ!",
            config.TELEGRAM_CHAT_ID
        )
        
    except Exception as e:
        test_logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —Ç–µ—Å—Ç—É: {e}")
        import traceback
        test_logger.error(traceback.format_exc())
    finally:
        # –ó—É–ø–∏–Ω—è—î–º–æ Telegram Worker
        await telegram_worker.stop()

if __name__ == "__main__":
    try:
        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–æ–Ω—Å–æ–ª—å–Ω–æ–≥–æ –ª–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è —Ç–µ—Å—Ç—É
        console_handler = logging.StreamHandler()
        console_handler.setLevel(logging.INFO)
        console_handler.setFormatter(logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s'))
        
        # –î–æ–¥–∞—î–º–æ –∫–æ–Ω—Å–æ–ª—å–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –¥–æ –≤—Å—ñ—Ö –ª–æ–≥–µ—Ä—ñ–≤
        for logger_name in ['main', 'telegram', 'arbitrage', 'users']:
            log = logging.getLogger(logger_name)
            log.addHandler(console_handler)
            log.setLevel(logging.INFO)
            
        loop = asyncio.get_event_loop()
        loop.run_until_complete(test_opportunity_notification())
    except KeyboardInterrupt:
        test_logger.info("–¢–µ—Å—Ç –∑—É–ø–∏–Ω–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
    except Exception as e:
        test_logger.error(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —Ç–µ—Å—Ç—É: {e}")
        import traceback
        test_logger.error(traceback.format_exc())
    finally:
        if loop and not loop.is_closed():
            loop.close()
