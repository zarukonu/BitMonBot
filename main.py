# main.py
import asyncio
import logging
import signal
import sys
import traceback
from datetime import datetime
import json
import os

import config
import logger
from arbitrage.finder import ArbitrageFinder
from telegram_worker import TelegramWorker

# –û—Ç—Ä–∏–º—É—î–º–æ –ª–æ–≥–µ—Ä
main_logger = logging.getLogger('main')

# –ì–ª–æ–±–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–Ω—ñ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è —Å—Ç–∞–Ω—É –ø—Ä–æ–≥—Ä–∞–º–∏
running = True
telegram_worker = None
arbitrage_finder = None

async def check_arbitrage_opportunities():
    """
    –ü–µ—Ä–µ–≤—ñ—Ä—è—î –∞—Ä–±—ñ—Ç—Ä–∞–∂–Ω—ñ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
    """
    global running, telegram_worker, arbitrage_finder
    
    try:
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ Telegram Worker
        telegram_worker = TelegramWorker(config.TELEGRAM_BOT_TOKEN, config.TELEGRAM_CHAT_ID)
        await telegram_worker.start()
        
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –ø–æ—à—É–∫–æ–≤–∏–∫ –∞—Ä–±—ñ—Ç—Ä–∞–∂–Ω–∏—Ö –º–æ–∂–ª–∏–≤–æ—Å—Ç–µ–π
        arbitrage_finder = ArbitrageFinder(
            ['binance', 'kucoin', 'kraken'],
            min_profit=config.MIN_PROFIT_THRESHOLD,
            include_fees=config.INCLUDE_FEES,
            buy_fee_type=config.BUY_FEE_TYPE,
            sell_fee_type=config.SELL_FEE_TYPE
        )
        await arbitrage_finder.initialize()
        
        fee_status = "–∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º –∫–æ–º—ñ—Å—ñ–π" if config.INCLUDE_FEES else "–±–µ–∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –∫–æ–º—ñ—Å—ñ–π"
        buy_fee_type = config.BUY_FEE_TYPE
        sell_fee_type = config.SELL_FEE_TYPE
        main_logger.info(f"{config.APP_NAME} —É—Å–ø—ñ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–æ ({fee_status}, —Ç–∏–ø –∫–æ–º—ñ—Å—ñ—ó –∫—É–ø—ñ–≤–ª—ñ: {buy_fee_type}, —Ç–∏–ø –∫–æ–º—ñ—Å—ñ—ó –ø—Ä–æ–¥–∞–∂—É: {sell_fee_type})!")
        
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –¥–æ–¥–∞—Ç–∫–æ–≤—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é
        if config.INCLUDE_FEES:
            config_message = (
                f"<b>‚ÑπÔ∏è –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è {config.APP_NAME}</b>\n\n"
                f"<b>–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π –ø–æ—Ä—ñ–≥ –ø—Ä–∏–±—É—Ç–∫—É:</b> {config.MIN_PROFIT_THRESHOLD}%\n"
                f"<b>–í—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –∫–æ–º—ñ—Å—ñ–π:</b> –£–≤—ñ–º–∫–Ω–µ–Ω–æ\n"
                f"<b>–¢–∏–ø –∫–æ–º—ñ—Å—ñ–π –∫—É–ø—ñ–≤–ª—ñ:</b> {config.BUY_FEE_TYPE}\n"
                f"<b>–¢–∏–ø –∫–æ–º—ñ—Å—ñ–π –ø—Ä–æ–¥–∞–∂—É:</b> {config.SELL_FEE_TYPE}\n"
                f"<b>–ö–æ–º—ñ—Å—ñ—ó –±—ñ—Ä–∂ (–∫—É–ø—ñ–≤–ª—è-{config.BUY_FEE_TYPE}):</b>\n"
                f"   ‚Ä¢ Binance: {config.EXCHANGE_FEES['binance'][config.BUY_FEE_TYPE]}%\n"
                f"   ‚Ä¢ KuCoin: {config.EXCHANGE_FEES['kucoin'][config.BUY_FEE_TYPE]}%\n"
                f"   ‚Ä¢ Kraken: {config.EXCHANGE_FEES['kraken'][config.BUY_FEE_TYPE]}%\n"
                f"<b>–ö–æ–º—ñ—Å—ñ—ó –±—ñ—Ä–∂ (–ø—Ä–æ–¥–∞–∂-{config.SELL_FEE_TYPE}):</b>\n"
                f"   ‚Ä¢ Binance: {config.EXCHANGE_FEES['binance'][config.SELL_FEE_TYPE]}%\n"
                f"   ‚Ä¢ KuCoin: {config.EXCHANGE_FEES['kucoin'][config.SELL_FEE_TYPE]}%\n"
                f"   ‚Ä¢ Kraken: {config.EXCHANGE_FEES['kraken'][config.SELL_FEE_TYPE]}%\n"
                f"<b>–Ü–Ω—Ç–µ—Ä–≤–∞–ª –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏:</b> {config.CHECK_INTERVAL} —Å–µ–∫—É–Ω–¥\n"
                f"<b>–ö—ñ–ª—å–∫—ñ—Å—Ç—å –≤–∞–ª—é—Ç–Ω–∏—Ö –ø–∞—Ä:</b> {len(config.PAIRS)}"
            )
            await telegram_worker.send_message(config_message, parse_mode="HTML")
        
        # –ß–∞—Å –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É
        last_status_save = datetime.now()
        last_telegram_status = datetime.now()
        
        # –û—Å–Ω–æ–≤–Ω–∏–π —Ü–∏–∫–ª —Ä–æ–±–æ—Ç–∏
        while running:
            start_time = datetime.now()
            
            try:
                # –®—É–∫–∞—î–º–æ –∞—Ä–±—ñ—Ç—Ä–∞–∂–Ω—ñ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ
                opportunities = await arbitrage_finder.find_opportunities()
                
                # –í–∏–º—ñ—Ä—é—î–º–æ —á–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è
                execution_time = (datetime.now() - start_time).total_seconds()
                
                # –Ø–∫—â–æ —î –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ, –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                for opp in opportunities:
                    message = opp.to_message()
                    await telegram_worker.send_message(message, parse_mode="HTML")
                
                main_logger.info(f"–ó–Ω–∞–π–¥–µ–Ω–æ {len(opportunities)} –∞—Ä–±—ñ—Ç—Ä–∞–∂–Ω–∏—Ö –º–æ–∂–ª–∏–≤–æ—Å—Ç–µ–π –∑–∞ {execution_time:.2f} —Å–µ–∫—É–Ω–¥")
                
                # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Å—Ç–∞—Ç—É—Å —É JSON-—Ñ–∞–π–ª –∑ –ø–µ—Ä—ñ–æ–¥–∏—á–Ω—ñ—Å—Ç—é
                current_time = datetime.now()
                if (current_time - last_status_save).total_seconds() >= config.SAVE_STATUS_INTERVAL:
                    status = {
                        "last_check": current_time.isoformat(),
                        "opportunities_found": len(opportunities),
                        "execution_time": execution_time,
                        "running": running,
                        "include_fees": config.INCLUDE_FEES,
                        "buy_fee_type": config.BUY_FEE_TYPE,
                        "sell_fee_type": config.SELL_FEE_TYPE,
                        "pairs_count": len(config.PAIRS),
                        "profit_threshold": config.MIN_PROFIT_THRESHOLD
                    }
                    
                    # –ü–µ—Ä–µ–∫–æ–Ω—É—î–º–æ—Å—è, —â–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è status —ñ—Å–Ω—É—î
                    os.makedirs("status", exist_ok=True)
                    
                    with open("status/current.json", "w") as f:
                        json.dump(status, f, indent=4)
                    
                    # –û–Ω–æ–≤–ª—é—î–º–æ —á–∞—Å –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è
                    last_status_save = current_time
                
                # –ü–µ—Ä—ñ–æ–¥–∏—á–Ω–æ –Ω–∞–¥—Å–∏–ª–∞—î–º–æ —Å—Ç–∞—Ç—É—Å –≤ Telegram
                if (current_time - last_telegram_status).total_seconds() >= config.TELEGRAM_STATUS_INTERVAL:
                    status_message = (
                        f"<b>üìä –°—Ç–∞—Ç—É—Å {config.APP_NAME}</b>\n\n"
                        f"<b>–û—Å—Ç–∞–Ω–Ω—î –æ–Ω–æ–≤–ª–µ–Ω–Ω—è:</b> {current_time.strftime('%Y-%m-%d %H:%M:%S')}\n"
                        f"<b>–ó–Ω–∞–π–¥–µ–Ω–æ –º–æ–∂–ª–∏–≤–æ—Å—Ç–µ–π:</b> {len(opportunities)}\n"
                        f"<b>–ß–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è:</b> {execution_time:.2f} —Å–µ–∫—É–Ω–¥\n"
                        f"<b>–ü–æ—Ä—ñ–≥ –ø—Ä–∏–±—É—Ç–∫—É:</b> {config.MIN_PROFIT_THRESHOLD}%\n"
                        f"<b>–í–∞–ª—é—Ç–Ω–∏—Ö –ø–∞—Ä:</b> {len(config.PAIRS)}\n"
                        f"<b>–°—Ç–∞—Ç—É—Å:</b> {'üü¢ –ê–∫—Ç–∏–≤–Ω–∏–π' if running else 'üî¥ –ó—É–ø–∏–Ω–µ–Ω–∏–π'}"
                    )
                    await telegram_worker.send_message(status_message, parse_mode="HTML")
                    
                    # –û–Ω–æ–≤–ª—é—î–º–æ —á–∞—Å –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É
                    last_telegram_status = current_time
                
                # –ß–µ–∫–∞—î–º–æ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ—ó –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
                await asyncio.sleep(config.CHECK_INTERVAL)
                
            except Exception as e:
                main_logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º—É —Ü–∏–∫–ª—ñ: {e}")
                main_logger.error(traceback.format_exc())
                # –ß–µ–∫–∞—î–º–æ —Ç—Ä–æ—Ö–∏ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ—é —Å–ø—Ä–æ–±–æ—é
                await asyncio.sleep(10)
                
    except Exception as e:
        main_logger.error(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É: {e}")
        main_logger.error(traceback.format_exc())
    finally:
        # –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –≤—Å—ñ —Ä–µ—Å—É—Ä—Å–∏
        await cleanup()

async def cleanup():
    """
    –ó–∞–∫—Ä–∏–≤–∞—î –≤—Å—ñ —Ä–µ—Å—É—Ä—Å–∏ –ø—Ä–∏ –∑—É–ø–∏–Ω—Ü—ñ –ø—Ä–æ–≥—Ä–∞–º–∏
    """
    main_logger.info(f"–ó—É–ø–∏–Ω–∫–∞ {config.APP_NAME}...")
    
    if arbitrage_finder:
        await arbitrage_finder.close_exchanges()
        
    if telegram_worker:
        await telegram_worker.stop()
        
    main_logger.info(f"{config.APP_NAME} —É—Å–ø—ñ—à–Ω–æ –∑—É–ø–∏–Ω–µ–Ω–æ")

def signal_handler():
    """
    –û–±—Ä–æ–±–Ω–∏–∫ —Å–∏–≥–Ω–∞–ª—ñ–≤ –ø–µ—Ä–µ—Ä–∏–≤–∞–Ω–Ω—è
    """
    global running
    running = False
    main_logger.info("–û—Ç—Ä–∏–º–∞–Ω–æ —Å–∏–≥–Ω–∞–ª –Ω–∞ –∑—É–ø–∏–Ω–∫—É...")

async def main():
    """
    –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –ø—Ä–æ–≥—Ä–∞–º–∏
    """
    global loop
    
    # –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ —Å–∏–≥–Ω–∞–ª—ñ–≤
    for sig in (signal.SIGINT, signal.SIGTERM):
        loop.add_signal_handler(sig, signal_handler)
    
    try:
        await check_arbitrage_opportunities()
    except Exception as e:
        main_logger.error(f"–ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –≤ main(): {e}")
        main_logger.error(traceback.format_exc())
    finally:
        await cleanup()

if __name__ == "__main__":
    try:
        # –°—Ç–≤–æ—Ä—é—î–º–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó –¥–ª—è –ª–æ–≥—ñ–≤ —Ç–∞ —Å—Ç–∞—Ç—É—Å—É
        os.makedirs("logs", exist_ok=True)
        os.makedirs("status", exist_ok=True)
        
        loop = asyncio.get_event_loop()
        loop.run_until_complete(main())
    except KeyboardInterrupt:
        main_logger.info("–ü—Ä–æ–≥—Ä–∞–º—É –∑—É–ø–∏–Ω–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
    except Exception as e:
        main_logger.error(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
        main_logger.error(traceback.format_exc())
    finally:
        if loop and not loop.is_closed():
            loop.close()
