# main.py
import asyncio
import logging
import signal
import sys
import traceback
from datetime import datetime
import json
import os
import time

import config
import logger
from arbitrage.finder import ArbitrageFinder
from telegram_worker import TelegramWorker

# –û—Ç—Ä–∏–º—É—î–º–æ –ª–æ–≥–µ—Ä
main_logger = logging.getLogger('main')

# –ó–º—ñ–Ω–Ω—ñ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è —Å—Ç–∞–Ω—É –ø—Ä–æ–≥—Ä–∞–º–∏
running = True
telegram_worker = None
arbitrage_finder = None

# –°—Ç–≤–æ—Ä—é—î–º–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é –¥–ª—è —Å—Ç–∞—Ç—É—Å—É, —è–∫—â–æ –≤–æ–Ω–∞ –Ω–µ —ñ—Å–Ω—É—î
os.makedirs('status', exist_ok=True)

async def check_arbitrage_opportunities(loop):
    """
    –ü–µ—Ä–µ–≤—ñ—Ä—è—î –∞—Ä–±—ñ—Ç—Ä–∞–∂–Ω—ñ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
    
    Args:
        loop (asyncio.AbstractEventLoop): –¶–∏–∫–ª –ø–æ–¥—ñ–π asyncio
    """
    global running, telegram_worker, arbitrage_finder
    
    try:
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ Telegram Worker
        telegram_worker = TelegramWorker(config.TELEGRAM_BOT_TOKEN, config.TELEGRAM_CHAT_ID)
        await telegram_worker.start()
        
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –ø–æ—à—É–∫–æ–≤–∏–∫ –∞—Ä–±—ñ—Ç—Ä–∞–∂–Ω–∏—Ö –º–æ–∂–ª–∏–≤–æ—Å—Ç–µ–π
        main_logger.info("–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∑'—î–¥–Ω–∞–Ω—å –∑ –±—ñ—Ä–∂–∞–º–∏...")
        start_time = time.time()
        arbitrage_finder = ArbitrageFinder(['binance', 'kucoin', 'kraken'])
        await arbitrage_finder.initialize()
        init_time = time.time() - start_time
        main_logger.info(f"–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—é –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ {init_time:.2f} —Å–µ–∫—É–Ω–¥")
        
        main_logger.info(f"{config.APP_NAME} —É—Å–ø—ñ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–æ!")
        
        # –ó–º—ñ–Ω–Ω—ñ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        total_checks = 0
        total_opportunities = 0
        start_time = time.time()
        
        # –û—Å–Ω–æ–≤–Ω–∏–π —Ü–∏–∫–ª —Ä–æ–±–æ—Ç–∏
        while running:
            try:
                # –®—É–∫–∞—î–º–æ –∞—Ä–±—ñ—Ç—Ä–∞–∂–Ω—ñ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ
                check_start = time.time()
                opportunities = await arbitrage_finder.find_opportunities()
                check_time = time.time() - check_start
                
                # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                total_checks += 1
                total_opportunities += len(opportunities)
                
                # –Ø–∫—â–æ —î –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ, –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                for opp in opportunities:
                    message = opp.to_message()
                    await telegram_worker.send_message(message, parse_mode="HTML")
                
                # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Å—Ç–∞—Ç—É—Å —É JSON-—Ñ–∞–π–ª–∏
                current_time = datetime.now()
                
                # –î–µ—Ç–∞–ª—å–Ω–∏–π —Å—Ç–∞—Ç—É—Å
                detailed_status = {
                    "last_check": current_time.isoformat(),
                    "opportunities_found": len(opportunities),
                    "running": running,
                    "uptime": time.time() - start_time,
                    "total_checks": total_checks,
                    "total_opportunities": total_opportunities,
                    "avg_check_time": check_time,
                    "last_opportunities": [opp.to_dict() for opp in opportunities][:5]
                }
                
                # –ö–æ—Ä–æ—Ç–∫–∏–π —Å—Ç–∞—Ç—É—Å
                status = {
                    "last_check": current_time.isoformat(),
                    "opportunities_found": len(opportunities),
                    "running": running,
                    "uptime": time.time() - start_time,
                    "total_checks": total_checks,
                    "total_opportunities": total_opportunities
                }
                
                # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Å—Ç–∞—Ç—É—Å–∏
                with open("status/detailed_status.json", "w") as f:
                    json.dump(detailed_status, f, indent=2)
                
                with open("status.json", "w") as f:
                    json.dump(status, f, indent=2)
                
                # –õ–æ–≥—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É
                if len(opportunities) > 0:
                    main_logger.info(f"–ó–Ω–∞–π–¥–µ–Ω–æ {len(opportunities)} –∞—Ä–±—ñ—Ç—Ä–∞–∂–Ω–∏—Ö –º–æ–∂–ª–∏–≤–æ—Å—Ç–µ–π –∑–∞ {check_time:.2f} —Å–µ–∫—É–Ω–¥")
                else:
                    main_logger.debug(f"–ü–µ—Ä–µ–≤—ñ—Ä–∫—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ {check_time:.2f} —Å–µ–∫—É–Ω–¥, –∞—Ä–±—ñ—Ç—Ä–∞–∂–Ω–∏—Ö –º–æ–∂–ª–∏–≤–æ—Å—Ç–µ–π –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
                
                # –ß–µ–∫–∞—î–º–æ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ—ó –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
                await asyncio.sleep(config.CHECK_INTERVAL)
                
            except Exception as e:
                main_logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º—É —Ü–∏–∫–ª—ñ: {e}")
                main_logger.error(traceback.format_exc())
                # –ß–µ–∫–∞—î–º–æ —Ç—Ä–æ—Ö–∏ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ—é —Å–ø—Ä–æ–±–æ—é
                await asyncio.sleep(10)
                
    except Exception as e:
        main_logger.error(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É: {e}")
        main_logger.error(traceback.format_exc())
    finally:
        # –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –≤—Å—ñ —Ä–µ—Å—É—Ä—Å–∏
        await cleanup()

async def cleanup():
    """
    –ó–∞–∫—Ä–∏–≤–∞—î –≤—Å—ñ —Ä–µ—Å—É—Ä—Å–∏ –ø—Ä–∏ –∑—É–ø–∏–Ω—Ü—ñ –ø—Ä–æ–≥—Ä–∞–º–∏
    """
    main_logger.info(f"–ó—É–ø–∏–Ω–∫–∞ {config.APP_NAME}...")
    
    try:
        if arbitrage_finder:
            await arbitrage_finder.close_exchanges()
    except Exception as e:
        main_logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä–∏—Ç—Ç—ñ –∑'—î–¥–Ω–∞–Ω—å –∑ –±—ñ—Ä–∂–∞–º–∏: {e}")
    
    try:
        if telegram_worker:
            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –∑—É–ø–∏–Ω–∫—É
            await telegram_worker.send_message(f"üõë {config.APP_NAME} –∑—É–ø–∏–Ω–µ–Ω–æ!", parse_mode="HTML")
            # –ß–µ–∫–∞—î–º–æ, —â–æ–± –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±—É–ª–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ
            if telegram_worker.queue:
                await telegram_worker.queue.join()
            await telegram_worker.stop()
    except Exception as e:
        main_logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑—É–ø–∏–Ω—Ü—ñ Telegram Worker: {e}")
    
    main_logger.info(f"{config.APP_NAME} —É—Å–ø—ñ—à–Ω–æ –∑—É–ø–∏–Ω–µ–Ω–æ")

def signal_handler():
    """
    –û–±—Ä–æ–±–Ω–∏–∫ —Å–∏–≥–Ω–∞–ª—ñ–≤ –ø–µ—Ä–µ—Ä–∏–≤–∞–Ω–Ω—è
    """
    global running
    running = False
    main_logger.info("–û—Ç—Ä–∏–º–∞–Ω–æ —Å–∏–≥–Ω–∞–ª –Ω–∞ –∑—É–ø–∏–Ω–∫—É...")

async def main():
    """
    –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –ø—Ä–æ–≥—Ä–∞–º–∏
    """
    # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —Ü–∏–∫–ª –ø–æ–¥—ñ–π
    loop = asyncio.get_running_loop()
    
    # –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ —Å–∏–≥–Ω–∞–ª—ñ–≤
    for sig in (signal.SIGINT, signal.SIGTERM):
        loop.add_signal_handler(sig, signal_handler)
    
    try:
        await check_arbitrage_opportunities(loop)
    except Exception as e:
        main_logger.error(f"–ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –≤ main(): {e}")
        main_logger.error(traceback.format_exc())
    finally:
        await cleanup()

if __name__ == "__main__":
    try:
        # –°—Ç–≤–æ—Ä—é—î–º–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é –¥–ª—è —Å—Ç–∞—Ç—É—Å—É
        os.makedirs('status', exist_ok=True)
        # –ó–∞–ø—É—Å–∫–∞—î–º–æ —Ü–∏–∫–ª –ø–æ–¥—ñ–π
        asyncio.run(main())
    except KeyboardInterrupt:
        main_logger.info("–ü—Ä–æ–≥—Ä–∞–º—É –∑—É–ø–∏–Ω–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
    except Exception as e:
        main_logger.error(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
        main_logger.error(traceback.format_exc())
