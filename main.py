# main.py
import time
import asyncio
import logging
import signal
import sys
import traceback
from datetime import datetime
import json
import os
from typing import Dict, Any

import config
import logger
from arbitrage.finder import ArbitrageFinder
from telegram_worker import TelegramWorker

# –û—Ç—Ä–∏–º—É—î–º–æ –ª–æ–≥–µ—Ä
main_logger = logging.getLogger('main')

# –ì–ª–æ–±–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–Ω—ñ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è —Å—Ç–∞–Ω—É –ø—Ä–æ–≥—Ä–∞–º–∏
running = True
telegram_worker = None
arbitrage_finder = None
start_time = time.time()
cycle_count = 0
total_opportunities = 0

async def check_arbitrage_opportunities():
    """
    –ü–µ—Ä–µ–≤—ñ—Ä—è—î –∞—Ä–±—ñ—Ç—Ä–∞–∂–Ω—ñ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
    """
    global running, telegram_worker, arbitrage_finder, cycle_count, total_opportunities
    
    try:
        # –°—Ç–≤–æ—Ä—é—î–º–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é –¥–ª—è —Å—Ç–∞—Ç—É—Å—É, —è–∫—â–æ –≤–æ–Ω–∞ –Ω–µ —ñ—Å–Ω—É—î
        os.makedirs("status", exist_ok=True)
        
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ Telegram Worker
        telegram_worker = TelegramWorker(config.TELEGRAM_BOT_TOKEN, config.TELEGRAM_CHAT_ID)
        await telegram_worker.start()
        
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –ø–æ—à—É–∫–æ–≤–∏–∫ –∞—Ä–±—ñ—Ç—Ä–∞–∂–Ω–∏—Ö –º–æ–∂–ª–∏–≤–æ—Å—Ç–µ–π
        arbitrage_finder = ArbitrageFinder(['binance', 'kucoin', 'kraken'])
        await arbitrage_finder.initialize()
        
        main_logger.info(f"{config.APP_NAME} —É—Å–ø—ñ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–æ!")
        
        # –û—Å–Ω–æ–≤–Ω–∏–π —Ü–∏–∫–ª —Ä–æ–±–æ—Ç–∏
        while running:
            try:
                cycle_count += 1
                main_logger.info(f"–¶–∏–∫–ª –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ #{cycle_count} —Ä–æ–∑–ø–æ—á–∞—Ç–æ. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø–∞—Ä–∏: {config.PAIRS}")
                start_cycle_time = time.time()
                
                # –®—É–∫–∞—î–º–æ –∞—Ä–±—ñ—Ç—Ä–∞–∂–Ω—ñ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ
                opportunities = await arbitrage_finder.find_opportunities()
                
                # –Ø–∫—â–æ —î –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ, –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                if opportunities:
                    total_opportunities += len(opportunities)
                    main_logger.info(f"–ó–Ω–∞–π–¥–µ–Ω–æ {len(opportunities)} –∞—Ä–±—ñ—Ç—Ä–∞–∂–Ω–∏—Ö –º–æ–∂–ª–∏–≤–æ—Å—Ç–µ–π")
                    for idx, opp in enumerate(opportunities, 1):
                        main_logger.info(f"–í—ñ–¥–ø—Ä–∞–≤–∫–∞ –∞—Ä–±—ñ—Ç—Ä–∞–∂–Ω–æ—ó –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ #{idx}: {opp.symbol} ({opp.profit_percent:.2f}%)")
                        message = opp.to_message()
                        await telegram_worker.send_message(message, parse_mode="HTML")
                else:
                    main_logger.info("–ê—Ä–±—ñ—Ç—Ä–∞–∂–Ω–∏—Ö –º–æ–∂–ª–∏–≤–æ—Å—Ç–µ–π –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
                
                # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Å—Ç–∞—Ç—É—Å —É JSON-—Ñ–∞–π–ª
                await save_status(opportunities)
                    
                cycle_duration = time.time() - start_cycle_time
                main_logger.info(f"–¶–∏–∫–ª #{cycle_count} –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ {cycle_duration:.2f} —Å–µ–∫. "
                               f"–û—á—ñ–∫—É—î–º–æ {config.CHECK_INTERVAL} —Å–µ–∫.")
                
                # –ü–µ—Ä—ñ–æ–¥–∏—á–Ω–æ –Ω–∞–¥—Å–∏–ª–∞—î–º–æ —Å—Ç–∞—Ç—É—Å –≤ Telegram (–∫–æ–∂–Ω—ñ 10 —Ü–∏–∫–ª—ñ–≤)
                if cycle_count % 10 == 0:
                    await send_status_message()
                
                # –ß–µ–∫–∞—î–º–æ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ—ó –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
                await asyncio.sleep(config.CHECK_INTERVAL)
                
            except Exception as e:
                main_logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º—É —Ü–∏–∫–ª—ñ: {e}")
                main_logger.error(traceback.format_exc())
                # –ß–µ–∫–∞—î–º–æ —Ç—Ä–æ—Ö–∏ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ—é —Å–ø—Ä–æ–±–æ—é
                await asyncio.sleep(10)
                
    except Exception as e:
        main_logger.error(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É: {e}")
        main_logger.error(traceback.format_exc())
    finally:
        # –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –≤—Å—ñ —Ä–µ—Å—É—Ä—Å–∏
        await cleanup()

async def save_status(opportunities = None):
    """
    –ó–±–µ—Ä—ñ–≥–∞—î –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞ —É JSON-—Ñ–∞–π–ª
    """
    global cycle_count, total_opportunities, start_time
    
    current_time = time.time()
    uptime_seconds = int(current_time - start_time)
    
    status_data = {
        "app_name": config.APP_NAME,
        "status": "running" if running else "stopped",
        "version": "2.0.0",
        "uptime": {
            "seconds": uptime_seconds,
            "formatted": f"{uptime_seconds // 3600}h {(uptime_seconds % 3600) // 60}m {uptime_seconds % 60}s"
        },
        "cycles": {
            "total": cycle_count,
            "last_check": datetime.now().isoformat()
        },
        "opportunities": {
            "total_found": total_opportunities,
            "last_check": len(opportunities) if opportunities is not None else 0
        },
        "telegram": await telegram_worker.get_queue_info() if telegram_worker else {"status": "not_initialized"},
        "arbitrage": arbitrage_finder.get_stats() if arbitrage_finder else {"status": "not_initialized"},
        "config": {
            "check_interval": config.CHECK_INTERVAL,
            "min_profit_threshold": config.MIN_PROFIT_THRESHOLD,
            "pairs": config.PAIRS,
            "test_mode": getattr(config, 'TEST_MODE', False)
        },
        "timestamp": datetime.now().isoformat()
    }
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ–≤–Ω–∏–π —Å—Ç–∞—Ç—É—Å
    with open("status/status.json", "w") as f:
        json.dump(status_data, f, indent=2)
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∫–æ—Ä–æ—Ç–∫–∏–π —Å—Ç–∞—Ç—É—Å –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ –¥–æ—Å—Ç—É–ø—É
    short_status = {
        "status": "running" if running else "stopped",
        "uptime": status_data["uptime"]["formatted"],
        "cycles": cycle_count,
        "opportunities_found": total_opportunities,
        "last_update": datetime.now().isoformat()
    }
    
    with open("status/short_status.json", "w") as f:
        json.dump(short_status, f, indent=2)
    
    return status_data

async def send_status_message():
    """
    –í—ñ–¥–ø—Ä–∞–≤–ª—è—î —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞ –≤ Telegram
    """
    global telegram_worker, cycle_count, total_opportunities, start_time
    
    if not telegram_worker:
        main_logger.error("–ù–µ–º–æ–∂–ª–∏–≤–æ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å - Telegram Worker –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ")
        return
    
    current_time = time.time()
    uptime_seconds = int(current_time - start_time)
    hours = uptime_seconds // 3600
    minutes = (uptime_seconds % 3600) // 60
    seconds = uptime_seconds % 60
    
    queue_info = await telegram_worker.get_queue_info()
    
    status_message = (
        f"<b>üìä –°—Ç–∞—Ç—É—Å {config.APP_NAME}</b>\n\n"
        f"<b>–°—Ç–∞–Ω:</b> {'–ü—Ä–∞—Ü—é—î' if running else '–ó—É–ø–∏–Ω–µ–Ω–æ'}\n"
        f"<b>–ß–∞—Å —Ä–æ–±–æ—Ç–∏:</b> {hours:02d}:{minutes:02d}:{seconds:02d}\n"
        f"<b>–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ü–∏–∫–ª—ñ–≤:</b> {cycle_count}\n"
        f"<b>–ó–Ω–∞–π–¥–µ–Ω–æ –∞—Ä–±—ñ—Ç—Ä–∞–∂–Ω–∏—Ö –º–æ–∂–ª–∏–≤–æ—Å—Ç–µ–π:</b> {total_opportunities}\n"
        f"<b>–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —É —á–µ—Ä–∑—ñ:</b> {queue_info['queue_size']}\n"
        f"<b>–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ:</b> {queue_info['messages_sent']}\n"
        f"<b>–ü–æ—Ä—ñ–≥ –ø—Ä–∏–±—É—Ç–∫—É:</b> {config.MIN_PROFIT_THRESHOLD}%\n"
        f"<b>–Ü–Ω—Ç–µ—Ä–≤–∞–ª –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏:</b> {config.CHECK_INTERVAL} —Å–µ–∫"
    )
    
    await telegram_worker.send_message(status_message, parse_mode="HTML")

async def cleanup():
    """
    –ó–∞–∫—Ä–∏–≤–∞—î –≤—Å—ñ —Ä–µ—Å—É—Ä—Å–∏ –ø—Ä–∏ –∑—É–ø–∏–Ω—Ü—ñ –ø—Ä–æ–≥—Ä–∞–º–∏
    """
    global running
    running = False
    
    main_logger.info(f"–ó—É–ø–∏–Ω–∫–∞ {config.APP_NAME}...")
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ñ—ñ–Ω–∞–ª—å–Ω–∏–π —Å—Ç–∞—Ç—É—Å
    await save_status([])
    
    if arbitrage_finder:
        await arbitrage_finder.close_exchanges()
        
    if telegram_worker:
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –∑—É–ø–∏–Ω–∫—É
        try:
            await telegram_worker.send_message(f"üõë {config.APP_NAME} –∑—É–ø–∏–Ω–µ–Ω–æ!")
            # –ß–µ–∫–∞—î–º–æ, –ø–æ–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±—É–¥–µ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ
            if telegram_worker.queue:
                await telegram_worker.queue.join()
        except Exception as e:
            main_logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –∑—É–ø–∏–Ω–∫—É: {e}")
        
        await telegram_worker.stop()
        
    main_logger.info(f"{config.APP_NAME} —É—Å–ø—ñ—à–Ω–æ –∑—É–ø–∏–Ω–µ–Ω–æ")

def signal_handler():
    """
    –û–±—Ä–æ–±–Ω–∏–∫ —Å–∏–≥–Ω–∞–ª—ñ–≤ –ø–µ—Ä–µ—Ä–∏–≤–∞–Ω–Ω—è
    """
    global running
    running = False
    main_logger.info("–û—Ç—Ä–∏–º–∞–Ω–æ —Å–∏–≥–Ω–∞–ª –Ω–∞ –∑—É–ø–∏–Ω–∫—É...")

async def main():
    """
    –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –ø—Ä–æ–≥—Ä–∞–º–∏
    """
    global loop
    
    # –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ —Å–∏–≥–Ω–∞–ª—ñ–≤
    for sig in (signal.SIGINT, signal.SIGTERM):
        loop.add_signal_handler(sig, signal_handler)
    
    try:
        await check_arbitrage_opportunities()
    except Exception as e:
        main_logger.error(f"–ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –≤ main(): {e}")
        main_logger.error(traceback.format_exc())
    finally:
        await cleanup()

if __name__ == "__main__":
    try:
        loop = asyncio.get_event_loop()
        loop.run_until_complete(main())
    except KeyboardInterrupt:
        main_logger.info("–ü—Ä–æ–≥—Ä–∞–º—É –∑—É–ø–∏–Ω–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
    except Exception as e:
        main_logger.error(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
        main_logger.error(traceback.format_exc())
    finally:
        if loop and not loop.is_closed():
            loop.close()
