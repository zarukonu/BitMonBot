# main.py
import asyncio
import logging
import signal
import sys
import traceback
from datetime import datetime
import json
import os

import config
import logger
from arbitrage.finder import ArbitrageFinder
from telegram_worker import TelegramWorker

# –û—Ç—Ä–∏–º—É—î–º–æ –ª–æ–≥–µ—Ä
main_logger = logging.getLogger('main')

# –ì–ª–æ–±–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–Ω—ñ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è —Å—Ç–∞–Ω—É –ø—Ä–æ–≥—Ä–∞–º–∏
running = True
telegram_worker = None
arbitrage_finder = None

async def check_arbitrage_opportunities():
    """
    –ü–µ—Ä–µ–≤—ñ—Ä—è—î –∞—Ä–±—ñ—Ç—Ä–∞–∂–Ω—ñ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
    """
    global running, telegram_worker, arbitrage_finder
    
    try:
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ Telegram Worker
        telegram_worker = TelegramWorker(config.TELEGRAM_BOT_TOKEN, config.TELEGRAM_CHAT_ID)
        await telegram_worker.start()
        
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –ø–æ—à—É–∫–æ–≤–∏–∫ –∞—Ä–±—ñ—Ç—Ä–∞–∂–Ω–∏—Ö –º–æ–∂–ª–∏–≤–æ—Å—Ç–µ–π
        arbitrage_finder = ArbitrageFinder(
            ['binance', 'kucoin', 'kraken'],
            min_profit=config.MIN_PROFIT_THRESHOLD,
            include_fees=config.INCLUDE_FEES,
            buy_fee_type=config.BUY_FEE_TYPE,
            sell_fee_type=config.SELL_FEE_TYPE
        )
        await arbitrage_finder.initialize()
        
        fee_status = "–∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º –∫–æ–º—ñ—Å—ñ–π" if config.INCLUDE_FEES else "–±–µ–∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –∫–æ–º—ñ—Å—ñ–π"
        main_logger.info(f"{config.APP_NAME} —É—Å–ø—ñ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–æ ({fee_status}, —Ç–∏–ø–∏ –∫–æ–º—ñ—Å—ñ–π: –∫—É–ø—ñ–≤–ª—è - {config.BUY_FEE_TYPE}, –ø—Ä–æ–¥–∞–∂ - {config.SELL_FEE_TYPE})!")
        
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –∑–∞–ø—É—Å–∫ –≤—Å—ñ–º –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
        admin_message = (
            f"<b>‚úÖ {config.APP_NAME} –∑–∞–ø—É—â–µ–Ω–æ!</b>\n\n"
            f"<b>–ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è:</b>\n"
            f"‚Ä¢ –í—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –∫–æ–º—ñ—Å—ñ–π: {'–£–≤—ñ–º–∫–Ω–µ–Ω–æ' if config.INCLUDE_FEES else '–í–∏–º–∫–Ω–µ–Ω–æ'}\n"
            f"‚Ä¢ –¢–∏–ø –∫–æ–º—ñ—Å—ñ–π –¥–ª—è –∫—É–ø—ñ–≤–ª—ñ: {config.BUY_FEE_TYPE}\n"
            f"‚Ä¢ –¢–∏–ø –∫–æ–º—ñ—Å—ñ–π –¥–ª—è –ø—Ä–æ–¥–∞–∂—É: {config.SELL_FEE_TYPE}\n"
            f"‚Ä¢ –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π –ø–æ—Ä—ñ–≥ –ø—Ä–∏–±—É—Ç–∫—É: {config.MIN_PROFIT_THRESHOLD}%\n"
            f"‚Ä¢ –ë—ñ—Ä–∂—ñ: Binance, KuCoin, Kraken\n"
            f"‚Ä¢ –í–∞–ª—é—Ç–Ω—ñ –ø–∞—Ä–∏: {', '.join(config.PAIRS[:5])}...\n"
            f"‚Ä¢ –Ü–Ω—Ç–µ—Ä–≤–∞–ª –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏: {config.CHECK_INTERVAL} —Å–µ–∫—É–Ω–¥"
        )
        
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ç—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
        await telegram_worker.broadcast_message(admin_message, parse_mode="HTML", only_admins=True)
        
        # –û—Å–Ω–æ–≤–Ω–∏–π —Ü–∏–∫–ª —Ä–æ–±–æ—Ç–∏
        while running:
            try:
                # –®—É–∫–∞—î–º–æ –∞—Ä–±—ñ—Ç—Ä–∞–∂–Ω—ñ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ
                opportunities = await arbitrage_finder.find_opportunities()
                
                # –Ø–∫—â–æ —î –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ, –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—Å—ñ–º –∞–∫—Ç–∏–≤–Ω–∏–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º
                for opp in opportunities:
                    message = opp.to_message()
                    
                    # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º –∑–∞ –ø—ñ–¥–ø–∏—Å–∫–æ—é
                    await telegram_worker.notify_about_opportunity(message)
                
                # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Å—Ç–∞—Ç—É—Å —É JSON-—Ñ–∞–π–ª
                status = {
                    "last_check": datetime.now().isoformat(),
                    "opportunities_found": len(opportunities),
                    "running": running,
                    "include_fees": config.INCLUDE_FEES,
                    "buy_fee_type": config.BUY_FEE_TYPE,
                    "sell_fee_type": config.SELL_FEE_TYPE,
                    "active_users": len(telegram_worker.user_manager.get_active_users())
                }
                
                with open("status.json", "w") as f:
                    json.dump(status, f, indent=4)
                
                # –ß–µ–∫–∞—î–º–æ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ—ó –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
                await asyncio.sleep(config.CHECK_INTERVAL)
                
            except Exception as e:
                main_logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º—É —Ü–∏–∫–ª—ñ: {e}")
                main_logger.error(traceback.format_exc())
                # –ß–µ–∫–∞—î–º–æ —Ç—Ä–æ—Ö–∏ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ—é —Å–ø—Ä–æ–±–æ—é
                await asyncio.sleep(10)
                
    except Exception as e:
        main_logger.error(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É: {e}")
        main_logger.error(traceback.format_exc())
    finally:
        # –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –≤—Å—ñ —Ä–µ—Å—É—Ä—Å–∏
        await cleanup()

async def cleanup():
    """
    –ó–∞–∫—Ä–∏–≤–∞—î –≤—Å—ñ —Ä–µ—Å—É—Ä—Å–∏ –ø—Ä–∏ –∑—É–ø–∏–Ω—Ü—ñ –ø—Ä–æ–≥—Ä–∞–º–∏
    """
    main_logger.info(f"–ó—É–ø–∏–Ω–∫–∞ {config.APP_NAME}...")
    
    if arbitrage_finder:
        await arbitrage_finder.close_exchanges()
        
    if telegram_worker:
        # –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤ –ø—Ä–æ –∑—É–ø–∏–Ω–∫—É
        try:
            await telegram_worker.broadcast_message(
                f"<b>üõë {config.APP_NAME} –∑—É–ø–∏–Ω–µ–Ω–æ!</b>",
                parse_mode="HTML",
                only_admins=True
            )
        except Exception as e:
            main_logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –∑—É–ø–∏–Ω–∫—É: {e}")
            
        await telegram_worker.stop()
        
    main_logger.info(f"{config.APP_NAME} —É—Å–ø—ñ—à–Ω–æ –∑—É–ø–∏–Ω–µ–Ω–æ")

def signal_handler():
    """
    –û–±—Ä–æ–±–Ω–∏–∫ —Å–∏–≥–Ω–∞–ª—ñ–≤ –ø–µ—Ä–µ—Ä–∏–≤–∞–Ω–Ω—è
    """
    global running
    running = False
    main_logger.info("–û—Ç—Ä–∏–º–∞–Ω–æ —Å–∏–≥–Ω–∞–ª –Ω–∞ –∑—É–ø–∏–Ω–∫—É...")

async def main():
    """
    –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –ø—Ä–æ–≥—Ä–∞–º–∏
    """
    # –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ —Å–∏–≥–Ω–∞–ª—ñ–≤
    for sig in (signal.SIGINT, signal.SIGTERM):
        loop.add_signal_handler(sig, signal_handler)
    
    try:
        await check_arbitrage_opportunities()
    except Exception as e:
        main_logger.error(f"–ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –≤ main(): {e}")
        main_logger.error(traceback.format_exc())
    finally:
        await cleanup()

if __name__ == "__main__":
    try:
        # –°—Ç–≤–æ—Ä—é—î–º–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é –¥–ª—è –ª–æ–≥—ñ–≤, —è–∫—â–æ –≤–æ–Ω–∞ –Ω–µ —ñ—Å–Ω—É—î
        os.makedirs(os.path.dirname(config.MAIN_LOG_FILE), exist_ok=True)
        
        loop = asyncio.get_event_loop()
        loop.run_until_complete(main())
    except KeyboardInterrupt:
        main_logger.info("–ü—Ä–æ–≥—Ä–∞–º—É –∑—É–ø–∏–Ω–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
    except Exception as e:
        main_logger.error(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
        main_logger.error(traceback.format_exc())
    finally:
        if loop and not loop.is_closed():
            loop.close()
